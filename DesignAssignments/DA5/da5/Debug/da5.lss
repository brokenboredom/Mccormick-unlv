
da5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000059a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  00000634  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000adc  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000403  00000000  00000000  000019d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026c  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 cb 02 	jmp	0x596	; 0x596 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_init>:
volatile int servoCnt = 97;	//holds OCR1A for servo
volatile uint16_t degree = 0;

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3<<UCSZ00);
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  bc:	08 95       	ret

000000be <USART_send>:
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
  be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c2:	95 ff       	sbrs	r25, 5
  c4:	fc cf       	rjmp	.-8      	; 0xbe <USART_send>
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ca:	08 95       	ret

000000cc <USART_putstring>:
	
}

void USART_putstring(char* StringPtr){
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
  d2:	03 c0       	rjmp	.+6      	; 0xda <USART_putstring+0xe>
		USART_send(*StringPtr);
  d4:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_send>
	StringPtr++;}
  d8:	21 96       	adiw	r28, 0x01	; 1
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
  da:	88 81       	ld	r24, Y
  dc:	81 11       	cpse	r24, r1
  de:	fa cf       	rjmp	.-12     	; 0xd4 <USART_putstring+0x8>
		USART_send(*StringPtr);
	StringPtr++;}
	
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	TimerOverflow++;		/* Increment Timer Overflow count */
  f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerOverflow>
  f8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <TimerOverflow+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <TimerOverflow+0x1>
 102:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerOverflow>
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <main>:

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	64 97       	sbiw	r28, 0x14	; 20
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	char string[10];
	char angle[10];
	long count;
	double distance;

	DDRB|=(1<<PB1);				// PWM Pins as Out	
 128:	84 b1       	in	r24, 0x04	; 4
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<Trigger_pin);	// Make trigger pin as output, PB0 is echo
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	80 62       	ori	r24, 0x20	; 32
 132:	84 b9       	out	0x04, r24	; 4
	
	USART_init();
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init>
	
	sei();						/* Enable global interrupt */
 138:	78 94       	sei
		// -- DO Servo operation
		//--------------------------------------------
		//Servo motor operations
	
		//Configure TIMER1
		TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);			// NON Inverted PWM
 13a:	e0 e8       	ldi	r30, 0x80	; 128
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 6a       	ori	r24, 0xA2	; 162
 142:	80 83       	st	Z, r24
		TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);	// PRESCALER=64 MODE 14(FAST PWM)
 144:	e1 e8       	ldi	r30, 0x81	; 129
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8b 61       	ori	r24, 0x1B	; 27
 14c:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << TOIE1);							/* Disable Timer1 overflow interrupts */
 14e:	ef e6       	ldi	r30, 0x6F	; 111
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	80 83       	st	Z, r24

		ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 158:	87 e8       	ldi	r24, 0x87	; 135
 15a:	93 e1       	ldi	r25, 0x13	; 19
 15c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 160:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
		//--------------------------------------------
		// 535 = 180 degrees
		if(servoCnt > 535) {
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16c:	88 31       	cpi	r24, 0x18	; 24
 16e:	92 40       	sbci	r25, 0x02	; 2
 170:	e4 f0       	brlt	.+56     	; 0x1aa <main+0x96>
			servoCnt = 97; // 0 degrees
 172:	81 e6       	ldi	r24, 0x61	; 97
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			OCR1A = servoCnt;
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 186:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 18a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			//tempCnt = 250; //DEBUG
			degree = 0;
 18e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 192:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	91 ee       	ldi	r25, 0xE1	; 225
 19a:	24 e0       	ldi	r18, 0x04	; 4
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	20 40       	sbci	r18, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x88>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x92>
 1a6:	00 00       	nop
 1a8:	23 c0       	rjmp	.+70     	; 0x1f0 <main+0xdc>
			_delay_ms(100);
		}
		else {
			OCR1A = servoCnt;
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			/*******************************************************/
			degree = degree + 2;
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1c2:	02 96       	adiw	r24, 0x02	; 2
 1c4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			servoCnt += 5;
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	05 96       	adiw	r24, 0x05	; 5
 1d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	99 e6       	ldi	r25, 0x69	; 105
 1e2:	28 e1       	ldi	r18, 0x18	; 24
 1e4:	81 50       	subi	r24, 0x01	; 1
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	20 40       	sbci	r18, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0xd0>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xda>
 1ee:	00 00       	nop
			_delay_ms(500);
		}
		
		// -- DO Sonic operation
		//------------- Sonic Sensor operations
		TIMSK1 = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		TCCR1A = 0;				/* Set all bit to zero Normal operation */
 1f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

		PORTB |= (1 << Trigger_pin);	/* Give 10us trigger pulse on trig. pin to HC-SR04 */
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	85 e3       	ldi	r24, 0x35	; 53
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0xee>
 206:	00 00       	nop
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	8f 7d       	andi	r24, 0xDF	; 223
 20c:	85 b9       	out	0x05, r24	; 5
		
		TCNT1 = 0;			/* Clear Timer counter */
 20e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 212:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TCCR1B = 0x41;		/* Setting for capture rising edge, No pre-scaler*/
 216:	81 e4       	ldi	r24, 0x41	; 65
 218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TIFR1 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	86 bb       	out	0x16, r24	; 22
		TIFR1 = 1<<TOV1;	/* Clear Timer Overflow flag */
 220:	96 bb       	out	0x16, r25	; 22

		/*Calculate width of Echo by Input Capture (ICP) on PortD PD6 */
		
		while ((TIFR1 & (1 << ICF1)) == 0);	/* Wait for rising edge */
 222:	b5 9b       	sbis	0x16, 5	; 22
 224:	fe cf       	rjmp	.-4      	; 0x222 <main+0x10e>
		TCNT1 = 0;			/* Clear Timer counter */
 226:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 22a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TCCR1B = 0x01;		/* Setting for capture falling edge, No pre-scaler */
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TIFR1 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 234:	90 e2       	ldi	r25, 0x20	; 32
 236:	96 bb       	out	0x16, r25	; 22
		TIFR1 = 1<<TOV1;	/* Clear Timer Overflow flag */
 238:	86 bb       	out	0x16, r24	; 22
		TimerOverflow = 0;	/* Clear Timer overflow count */
 23a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <TimerOverflow+0x1>
 23e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerOverflow>

		while ((TIFR1 & (1 << ICF1)) == 0);		/* Wait for falling edge */
 242:	b5 9b       	sbis	0x16, 5	; 22
 244:	fe cf       	rjmp	.-4      	; 0x242 <main+0x12e>
		count = ICR1 + (65535 * TimerOverflow);	/* Take value of capture register */
 246:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 24a:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
		/* 8MHz Timer freq, sound speed =343 m/s, calculation mentioned in doc. */
		distance = (double)count / (58*16);
 252:	0e 94 0a 02 	call	0x414	; 0x414 <__floatsisf>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	48 e6       	ldi	r20, 0x68	; 104
 25c:	54 e4       	ldi	r21, 0x44	; 68
 25e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__divsf3>
 262:	6b 01       	movw	r12, r22
 264:	7c 01       	movw	r14, r24

		itoa(degree, angle, 10);
 266:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 26a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 26e:	4a e0       	ldi	r20, 0x0A	; 10
 270:	be 01       	movw	r22, r28
 272:	65 5f       	subi	r22, 0xF5	; 245
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	0e 94 96 02 	call	0x52c	; 0x52c <__itoa_ncheck>
		USART_putstring(angle);
 27a:	ce 01       	movw	r24, r28
 27c:	0b 96       	adiw	r24, 0x0b	; 11
 27e:	0e 94 66 00 	call	0xcc	; 0xcc <USART_putstring>
		USART_putstring(",");
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 66 00 	call	0xcc	; 0xcc <USART_putstring>
		itoa(distance, string, 10);/* Convert distance into string */
 28a:	c7 01       	movw	r24, r14
 28c:	b6 01       	movw	r22, r12
 28e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fixsfsi>
 292:	dc 01       	movw	r26, r24
 294:	cb 01       	movw	r24, r22
 296:	4a e0       	ldi	r20, 0x0A	; 10
 298:	be 01       	movw	r22, r28
 29a:	6f 5f       	subi	r22, 0xFF	; 255
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	0e 94 96 02 	call	0x52c	; 0x52c <__itoa_ncheck>
		USART_putstring(string);	/* Print distance on Terminal */
 2a2:	ce 01       	movw	r24, r28
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	0e 94 66 00 	call	0xcc	; 0xcc <USART_putstring>
		USART_putstring(".");
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 66 00 	call	0xcc	; 0xcc <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	9c e9       	ldi	r25, 0x9C	; 156
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x1a2>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x1a8>
 2bc:	00 00       	nop
 2be:	3d cf       	rjmp	.-390    	; 0x13a <main+0x26>

000002c0 <__divsf3>:
 2c0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__divsf3x>
 2c4:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__fp_round>
 2c8:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fp_pscB>
 2cc:	58 f0       	brcs	.+22     	; 0x2e4 <__divsf3+0x24>
 2ce:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_pscA>
 2d2:	40 f0       	brcs	.+16     	; 0x2e4 <__divsf3+0x24>
 2d4:	29 f4       	brne	.+10     	; 0x2e0 <__divsf3+0x20>
 2d6:	5f 3f       	cpi	r21, 0xFF	; 255
 2d8:	29 f0       	breq	.+10     	; 0x2e4 <__divsf3+0x24>
 2da:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_inf>
 2de:	51 11       	cpse	r21, r1
 2e0:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_szero>
 2e4:	0c 94 4b 02 	jmp	0x496	; 0x496 <__fp_nan>

000002e8 <__divsf3x>:
 2e8:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_split3>
 2ec:	68 f3       	brcs	.-38     	; 0x2c8 <__divsf3+0x8>

000002ee <__divsf3_pse>:
 2ee:	99 23       	and	r25, r25
 2f0:	b1 f3       	breq	.-20     	; 0x2de <__divsf3+0x1e>
 2f2:	55 23       	and	r21, r21
 2f4:	91 f3       	breq	.-28     	; 0x2da <__divsf3+0x1a>
 2f6:	95 1b       	sub	r25, r21
 2f8:	55 0b       	sbc	r21, r21
 2fa:	bb 27       	eor	r27, r27
 2fc:	aa 27       	eor	r26, r26
 2fe:	62 17       	cp	r22, r18
 300:	73 07       	cpc	r23, r19
 302:	84 07       	cpc	r24, r20
 304:	38 f0       	brcs	.+14     	; 0x314 <__divsf3_pse+0x26>
 306:	9f 5f       	subi	r25, 0xFF	; 255
 308:	5f 4f       	sbci	r21, 0xFF	; 255
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	44 1f       	adc	r20, r20
 310:	aa 1f       	adc	r26, r26
 312:	a9 f3       	breq	.-22     	; 0x2fe <__divsf3_pse+0x10>
 314:	35 d0       	rcall	.+106    	; 0x380 <__divsf3_pse+0x92>
 316:	0e 2e       	mov	r0, r30
 318:	3a f0       	brmi	.+14     	; 0x328 <__divsf3_pse+0x3a>
 31a:	e0 e8       	ldi	r30, 0x80	; 128
 31c:	32 d0       	rcall	.+100    	; 0x382 <__divsf3_pse+0x94>
 31e:	91 50       	subi	r25, 0x01	; 1
 320:	50 40       	sbci	r21, 0x00	; 0
 322:	e6 95       	lsr	r30
 324:	00 1c       	adc	r0, r0
 326:	ca f7       	brpl	.-14     	; 0x31a <__divsf3_pse+0x2c>
 328:	2b d0       	rcall	.+86     	; 0x380 <__divsf3_pse+0x92>
 32a:	fe 2f       	mov	r31, r30
 32c:	29 d0       	rcall	.+82     	; 0x380 <__divsf3_pse+0x92>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	88 1f       	adc	r24, r24
 334:	bb 1f       	adc	r27, r27
 336:	26 17       	cp	r18, r22
 338:	37 07       	cpc	r19, r23
 33a:	48 07       	cpc	r20, r24
 33c:	ab 07       	cpc	r26, r27
 33e:	b0 e8       	ldi	r27, 0x80	; 128
 340:	09 f0       	breq	.+2      	; 0x344 <__divsf3_pse+0x56>
 342:	bb 0b       	sbc	r27, r27
 344:	80 2d       	mov	r24, r0
 346:	bf 01       	movw	r22, r30
 348:	ff 27       	eor	r31, r31
 34a:	93 58       	subi	r25, 0x83	; 131
 34c:	5f 4f       	sbci	r21, 0xFF	; 255
 34e:	3a f0       	brmi	.+14     	; 0x35e <__divsf3_pse+0x70>
 350:	9e 3f       	cpi	r25, 0xFE	; 254
 352:	51 05       	cpc	r21, r1
 354:	78 f0       	brcs	.+30     	; 0x374 <__divsf3_pse+0x86>
 356:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_inf>
 35a:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_szero>
 35e:	5f 3f       	cpi	r21, 0xFF	; 255
 360:	e4 f3       	brlt	.-8      	; 0x35a <__divsf3_pse+0x6c>
 362:	98 3e       	cpi	r25, 0xE8	; 232
 364:	d4 f3       	brlt	.-12     	; 0x35a <__divsf3_pse+0x6c>
 366:	86 95       	lsr	r24
 368:	77 95       	ror	r23
 36a:	67 95       	ror	r22
 36c:	b7 95       	ror	r27
 36e:	f7 95       	ror	r31
 370:	9f 5f       	subi	r25, 0xFF	; 255
 372:	c9 f7       	brne	.-14     	; 0x366 <__divsf3_pse+0x78>
 374:	88 0f       	add	r24, r24
 376:	91 1d       	adc	r25, r1
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
 37c:	97 f9       	bld	r25, 7
 37e:	08 95       	ret
 380:	e1 e0       	ldi	r30, 0x01	; 1
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	bb 1f       	adc	r27, r27
 38a:	62 17       	cp	r22, r18
 38c:	73 07       	cpc	r23, r19
 38e:	84 07       	cpc	r24, r20
 390:	ba 07       	cpc	r27, r26
 392:	20 f0       	brcs	.+8      	; 0x39c <__divsf3_pse+0xae>
 394:	62 1b       	sub	r22, r18
 396:	73 0b       	sbc	r23, r19
 398:	84 0b       	sbc	r24, r20
 39a:	ba 0b       	sbc	r27, r26
 39c:	ee 1f       	adc	r30, r30
 39e:	88 f7       	brcc	.-30     	; 0x382 <__divsf3_pse+0x94>
 3a0:	e0 95       	com	r30
 3a2:	08 95       	ret

000003a4 <__fixsfsi>:
 3a4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 3a8:	68 94       	set
 3aa:	b1 11       	cpse	r27, r1
 3ac:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_szero>
 3b0:	08 95       	ret

000003b2 <__fixunssfsi>:
 3b2:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_splitA>
 3b6:	88 f0       	brcs	.+34     	; 0x3da <__fixunssfsi+0x28>
 3b8:	9f 57       	subi	r25, 0x7F	; 127
 3ba:	98 f0       	brcs	.+38     	; 0x3e2 <__fixunssfsi+0x30>
 3bc:	b9 2f       	mov	r27, r25
 3be:	99 27       	eor	r25, r25
 3c0:	b7 51       	subi	r27, 0x17	; 23
 3c2:	b0 f0       	brcs	.+44     	; 0x3f0 <__fixunssfsi+0x3e>
 3c4:	e1 f0       	breq	.+56     	; 0x3fe <__fixunssfsi+0x4c>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	88 1f       	adc	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	1a f0       	brmi	.+6      	; 0x3d6 <__fixunssfsi+0x24>
 3d0:	ba 95       	dec	r27
 3d2:	c9 f7       	brne	.-14     	; 0x3c6 <__fixunssfsi+0x14>
 3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__fixunssfsi+0x4c>
 3d6:	b1 30       	cpi	r27, 0x01	; 1
 3d8:	91 f0       	breq	.+36     	; 0x3fe <__fixunssfsi+0x4c>
 3da:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_zero>
 3de:	b1 e0       	ldi	r27, 0x01	; 1
 3e0:	08 95       	ret
 3e2:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_zero>
 3e6:	67 2f       	mov	r22, r23
 3e8:	78 2f       	mov	r23, r24
 3ea:	88 27       	eor	r24, r24
 3ec:	b8 5f       	subi	r27, 0xF8	; 248
 3ee:	39 f0       	breq	.+14     	; 0x3fe <__fixunssfsi+0x4c>
 3f0:	b9 3f       	cpi	r27, 0xF9	; 249
 3f2:	cc f3       	brlt	.-14     	; 0x3e6 <__fixunssfsi+0x34>
 3f4:	86 95       	lsr	r24
 3f6:	77 95       	ror	r23
 3f8:	67 95       	ror	r22
 3fa:	b3 95       	inc	r27
 3fc:	d9 f7       	brne	.-10     	; 0x3f4 <__fixunssfsi+0x42>
 3fe:	3e f4       	brtc	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	90 95       	com	r25
 402:	80 95       	com	r24
 404:	70 95       	com	r23
 406:	61 95       	neg	r22
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__floatunsisf>:
 410:	e8 94       	clt
 412:	09 c0       	rjmp	.+18     	; 0x426 <__floatsisf+0x12>

00000414 <__floatsisf>:
 414:	97 fb       	bst	r25, 7
 416:	3e f4       	brtc	.+14     	; 0x426 <__floatsisf+0x12>
 418:	90 95       	com	r25
 41a:	80 95       	com	r24
 41c:	70 95       	com	r23
 41e:	61 95       	neg	r22
 420:	7f 4f       	sbci	r23, 0xFF	; 255
 422:	8f 4f       	sbci	r24, 0xFF	; 255
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	99 23       	and	r25, r25
 428:	a9 f0       	breq	.+42     	; 0x454 <__floatsisf+0x40>
 42a:	f9 2f       	mov	r31, r25
 42c:	96 e9       	ldi	r25, 0x96	; 150
 42e:	bb 27       	eor	r27, r27
 430:	93 95       	inc	r25
 432:	f6 95       	lsr	r31
 434:	87 95       	ror	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b7 95       	ror	r27
 43c:	f1 11       	cpse	r31, r1
 43e:	f8 cf       	rjmp	.-16     	; 0x430 <__floatsisf+0x1c>
 440:	fa f4       	brpl	.+62     	; 0x480 <__floatsisf+0x6c>
 442:	bb 0f       	add	r27, r27
 444:	11 f4       	brne	.+4      	; 0x44a <__floatsisf+0x36>
 446:	60 ff       	sbrs	r22, 0
 448:	1b c0       	rjmp	.+54     	; 0x480 <__floatsisf+0x6c>
 44a:	6f 5f       	subi	r22, 0xFF	; 255
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8f 4f       	sbci	r24, 0xFF	; 255
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	16 c0       	rjmp	.+44     	; 0x480 <__floatsisf+0x6c>
 454:	88 23       	and	r24, r24
 456:	11 f0       	breq	.+4      	; 0x45c <__floatsisf+0x48>
 458:	96 e9       	ldi	r25, 0x96	; 150
 45a:	11 c0       	rjmp	.+34     	; 0x47e <__floatsisf+0x6a>
 45c:	77 23       	and	r23, r23
 45e:	21 f0       	breq	.+8      	; 0x468 <__floatsisf+0x54>
 460:	9e e8       	ldi	r25, 0x8E	; 142
 462:	87 2f       	mov	r24, r23
 464:	76 2f       	mov	r23, r22
 466:	05 c0       	rjmp	.+10     	; 0x472 <__floatsisf+0x5e>
 468:	66 23       	and	r22, r22
 46a:	71 f0       	breq	.+28     	; 0x488 <__floatsisf+0x74>
 46c:	96 e8       	ldi	r25, 0x86	; 134
 46e:	86 2f       	mov	r24, r22
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	2a f0       	brmi	.+10     	; 0x480 <__floatsisf+0x6c>
 476:	9a 95       	dec	r25
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	da f7       	brpl	.-10     	; 0x476 <__floatsisf+0x62>
 480:	88 0f       	add	r24, r24
 482:	96 95       	lsr	r25
 484:	87 95       	ror	r24
 486:	97 f9       	bld	r25, 7
 488:	08 95       	ret

0000048a <__fp_inf>:
 48a:	97 f9       	bld	r25, 7
 48c:	9f 67       	ori	r25, 0x7F	; 127
 48e:	80 e8       	ldi	r24, 0x80	; 128
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	08 95       	ret

00000496 <__fp_nan>:
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	80 ec       	ldi	r24, 0xC0	; 192
 49a:	08 95       	ret

0000049c <__fp_pscA>:
 49c:	00 24       	eor	r0, r0
 49e:	0a 94       	dec	r0
 4a0:	16 16       	cp	r1, r22
 4a2:	17 06       	cpc	r1, r23
 4a4:	18 06       	cpc	r1, r24
 4a6:	09 06       	cpc	r0, r25
 4a8:	08 95       	ret

000004aa <__fp_pscB>:
 4aa:	00 24       	eor	r0, r0
 4ac:	0a 94       	dec	r0
 4ae:	12 16       	cp	r1, r18
 4b0:	13 06       	cpc	r1, r19
 4b2:	14 06       	cpc	r1, r20
 4b4:	05 06       	cpc	r0, r21
 4b6:	08 95       	ret

000004b8 <__fp_round>:
 4b8:	09 2e       	mov	r0, r25
 4ba:	03 94       	inc	r0
 4bc:	00 0c       	add	r0, r0
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__fp_round+0xc>
 4c0:	88 23       	and	r24, r24
 4c2:	52 f0       	brmi	.+20     	; 0x4d8 <__fp_round+0x20>
 4c4:	bb 0f       	add	r27, r27
 4c6:	40 f4       	brcc	.+16     	; 0x4d8 <__fp_round+0x20>
 4c8:	bf 2b       	or	r27, r31
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__fp_round+0x18>
 4cc:	60 ff       	sbrs	r22, 0
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__fp_round+0x20>
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	08 95       	ret

000004da <__fp_split3>:
 4da:	57 fd       	sbrc	r21, 7
 4dc:	90 58       	subi	r25, 0x80	; 128
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	59 f0       	breq	.+22     	; 0x4fa <__fp_splitA+0x10>
 4e4:	5f 3f       	cpi	r21, 0xFF	; 255
 4e6:	71 f0       	breq	.+28     	; 0x504 <__fp_splitA+0x1a>
 4e8:	47 95       	ror	r20

000004ea <__fp_splitA>:
 4ea:	88 0f       	add	r24, r24
 4ec:	97 fb       	bst	r25, 7
 4ee:	99 1f       	adc	r25, r25
 4f0:	61 f0       	breq	.+24     	; 0x50a <__fp_splitA+0x20>
 4f2:	9f 3f       	cpi	r25, 0xFF	; 255
 4f4:	79 f0       	breq	.+30     	; 0x514 <__fp_splitA+0x2a>
 4f6:	87 95       	ror	r24
 4f8:	08 95       	ret
 4fa:	12 16       	cp	r1, r18
 4fc:	13 06       	cpc	r1, r19
 4fe:	14 06       	cpc	r1, r20
 500:	55 1f       	adc	r21, r21
 502:	f2 cf       	rjmp	.-28     	; 0x4e8 <__fp_split3+0xe>
 504:	46 95       	lsr	r20
 506:	f1 df       	rcall	.-30     	; 0x4ea <__fp_splitA>
 508:	08 c0       	rjmp	.+16     	; 0x51a <__fp_splitA+0x30>
 50a:	16 16       	cp	r1, r22
 50c:	17 06       	cpc	r1, r23
 50e:	18 06       	cpc	r1, r24
 510:	99 1f       	adc	r25, r25
 512:	f1 cf       	rjmp	.-30     	; 0x4f6 <__fp_splitA+0xc>
 514:	86 95       	lsr	r24
 516:	71 05       	cpc	r23, r1
 518:	61 05       	cpc	r22, r1
 51a:	08 94       	sec
 51c:	08 95       	ret

0000051e <__fp_zero>:
 51e:	e8 94       	clt

00000520 <__fp_szero>:
 520:	bb 27       	eor	r27, r27
 522:	66 27       	eor	r22, r22
 524:	77 27       	eor	r23, r23
 526:	cb 01       	movw	r24, r22
 528:	97 f9       	bld	r25, 7
 52a:	08 95       	ret

0000052c <__itoa_ncheck>:
 52c:	bb 27       	eor	r27, r27
 52e:	4a 30       	cpi	r20, 0x0A	; 10
 530:	31 f4       	brne	.+12     	; 0x53e <__itoa_ncheck+0x12>
 532:	99 23       	and	r25, r25
 534:	22 f4       	brpl	.+8      	; 0x53e <__itoa_ncheck+0x12>
 536:	bd e2       	ldi	r27, 0x2D	; 45
 538:	90 95       	com	r25
 53a:	81 95       	neg	r24
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	0c 94 a2 02 	jmp	0x544	; 0x544 <__utoa_common>

00000542 <__utoa_ncheck>:
 542:	bb 27       	eor	r27, r27

00000544 <__utoa_common>:
 544:	fb 01       	movw	r30, r22
 546:	55 27       	eor	r21, r21
 548:	aa 27       	eor	r26, r26
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	aa 1f       	adc	r26, r26
 550:	a4 17       	cp	r26, r20
 552:	10 f0       	brcs	.+4      	; 0x558 <__utoa_common+0x14>
 554:	a4 1b       	sub	r26, r20
 556:	83 95       	inc	r24
 558:	50 51       	subi	r21, 0x10	; 16
 55a:	b9 f7       	brne	.-18     	; 0x54a <__utoa_common+0x6>
 55c:	a0 5d       	subi	r26, 0xD0	; 208
 55e:	aa 33       	cpi	r26, 0x3A	; 58
 560:	08 f0       	brcs	.+2      	; 0x564 <__utoa_common+0x20>
 562:	a9 5d       	subi	r26, 0xD9	; 217
 564:	a1 93       	st	Z+, r26
 566:	00 97       	sbiw	r24, 0x00	; 0
 568:	79 f7       	brne	.-34     	; 0x548 <__utoa_common+0x4>
 56a:	b1 11       	cpse	r27, r1
 56c:	b1 93       	st	Z+, r27
 56e:	11 92       	st	Z+, r1
 570:	cb 01       	movw	r24, r22
 572:	0c 94 bb 02 	jmp	0x576	; 0x576 <strrev>

00000576 <strrev>:
 576:	dc 01       	movw	r26, r24
 578:	fc 01       	movw	r30, r24
 57a:	67 2f       	mov	r22, r23
 57c:	71 91       	ld	r23, Z+
 57e:	77 23       	and	r23, r23
 580:	e1 f7       	brne	.-8      	; 0x57a <strrev+0x4>
 582:	32 97       	sbiw	r30, 0x02	; 2
 584:	04 c0       	rjmp	.+8      	; 0x58e <strrev+0x18>
 586:	7c 91       	ld	r23, X
 588:	6d 93       	st	X+, r22
 58a:	70 83       	st	Z, r23
 58c:	62 91       	ld	r22, -Z
 58e:	ae 17       	cp	r26, r30
 590:	bf 07       	cpc	r27, r31
 592:	c8 f3       	brcs	.-14     	; 0x586 <strrev+0x10>
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
