
da3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006db  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000626  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cb  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000371  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 00 	call	0x120	; 0x120 <main>
  88:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:

volatile int COMPA_count;	// OVF Counter for part c
volatile int TOV0_count;	// OVF counter for part a

ISR (TIMER1_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	PORTB ^= (1 << LEDB);	// Toggle our LED
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	89 27       	eor	r24, r25
  a4:	85 b9       	out	0x05, r24	; 5
	TCNT1 = 49926;			// for 0.999 sec at 16 MHz (65536 - (16 MHz / 1024)*0.999)
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	93 ec       	ldi	r25, 0xC3	; 195
  aa:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ae:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_7>:

ISR (TIMER2_COMPA_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	COMPA_count++;				// 16 MHz / (1024 + 1+255)*0.666 = 40.65 compare matches
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <COMPA_count>
  d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <COMPA_count+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <COMPA_count+0x1>
  dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <COMPA_count>
	if (COMPA_count == 40)
  e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <COMPA_count>
  e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <COMPA_count+0x1>
  e8:	88 97       	sbiw	r24, 0x28	; 40
  ea:	19 f4       	brne	.+6      	; 0xf2 <__vector_7+0x32>
	{
		TCNT2 = 166;			// Adjusted final cycle
  ec:	86 ea       	ldi	r24, 0xA6	; 166
  ee:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	}
	if (COMPA_count == 41)
  f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <COMPA_count>
  f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <COMPA_count+0x1>
  fa:	89 97       	sbiw	r24, 0x29	; 41
  fc:	51 f4       	brne	.+20     	; 0x112 <__vector_7+0x52>
	{
		PORTB ^= (1 << LEDC);	// Toggle our LED
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	89 27       	eor	r24, r25
 104:	85 b9       	out	0x05, r24	; 5
		COMPA_count = 0;		// Reset OVF counter
 106:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <COMPA_count+0x1>
 10a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <COMPA_count>
		TCNT2 = 0;				// Reset timer2 clock
 10e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	}
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <main>:

int main()
{
	// Configure PORTS
	DDRB |= (0x01 << LEDA);	//Configure the PORTB5 as output
 120:	84 b1       	in	r24, 0x04	; 4
 122:	82 60       	ori	r24, 0x02	; 2
 124:	84 b9       	out	0x04, r24	; 4
	DDRB |= (0x01 << LEDB);	//Configure the PORTB3 as output
 126:	84 b1       	in	r24, 0x04	; 4
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (0x01 << LEDC);	//Configure the PORTB4 as output
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	84 b9       	out	0x04, r24	; 4
	
	// Configure Timer0
	TCNT0 = 0;										// for 0.333 sec at 16 MHz	
 132:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;
 134:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS02) | (0<<CS01) | (1<<CS00);	// Normal mode with 1024 prescaler 
 136:	85 b5       	in	r24, 0x25	; 37
 138:	85 60       	ori	r24, 0x05	; 5
 13a:	85 bd       	out	0x25, r24	; 37
	TOV0_count = 0;									// OVF count
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// Configure Timer1
	TCNT1 = 49926;									// for 0.999 sec at 16 MHz	
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	93 ec       	ldi	r25, 0xC3	; 195
 148:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 14c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00;
 150:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1<<CS12) | (0<<CS11) | (1<<CS10);	// Normal mode with 1024 prescaler
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	85 60       	ori	r24, 0x05	; 5
 15c:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1);							// Set timer interrupt
 15e:	ef e6       	ldi	r30, 0x6F	; 111
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
	
	// Configure Timer2
	TCNT2 = 0;
 168:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	OCR2A = 255;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A |= (1<<WGM21) | (0<<WGM20);							// CTC mode
 172:	e0 eb       	ldi	r30, 0xB0	; 176
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
	TCCR2B |= (0<<WGM22) | (1<<CS22) | (1<<CS21) | (1<<CS20);	// Prescaler to 1024
 17c:	e1 eb       	ldi	r30, 0xB1	; 177
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	87 60       	ori	r24, 0x07	; 7
 184:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);										// Set timer interrupt
 186:	e0 e7       	ldi	r30, 0x70	; 112
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
	COMPA_count = 0;											// Compare match count
 190:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <COMPA_count+0x1>
 194:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <COMPA_count>
	
	sei();		// Enable global interrupts
 198:	78 94       	sei
	
	while(1)
	{			
		while ((TIFR0 & 0x01) == 0)
 19a:	a8 9b       	sbis	0x15, 0	; 21
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0x7a>
		{
			// wait here for overflow flag
		}; 
		TCNT0 = 0x00;	// Reset timer 0
 19e:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;	// clear timer0 overflow flag (write logic 1)	              
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	85 bb       	out	0x15, r24	; 21
		TOV0_count++; 
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (TOV0_count==20)
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	44 97       	sbiw	r24, 0x14	; 20
 1c0:	61 f7       	brne	.-40     	; 0x19a <main+0x7a>
		{
			PORTB ^= (0x01 << LEDA);	// toggle our LED		 
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	89 27       	eor	r24, r25
 1c8:	85 b9       	out	0x05, r24	; 5
			TOV0_count=0;				// Reset count
 1ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d2:	e3 cf       	rjmp	.-58     	; 0x19a <main+0x7a>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
