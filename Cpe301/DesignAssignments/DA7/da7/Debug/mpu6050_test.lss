
mpu6050_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001dc4  00001e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800108  00800108  00001e60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f8  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094e  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab1  00000000  00000000  00003f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000049d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb6  00000000  00000000  000051c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005d7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	00 40       	sbci	r16, 0x00	; 0
      98:	7a 10       	cpse	r7, r10
      9a:	f3 5a       	subi	r31, 0xA3	; 163
      9c:	00 a0       	ldd	r0, Z+32	; 0x20
      9e:	72 4e       	sbci	r23, 0xE2	; 226
      a0:	18 09       	sbc	r17, r8
      a2:	00 10       	cpse	r0, r0
      a4:	a5 d4       	rcall	.+2378   	; 0x9f0 <__stack+0xf1>
      a6:	e8 00       	.word	0x00e8	; ????
      a8:	00 e8       	ldi	r16, 0x80	; 128
      aa:	76 48       	sbci	r23, 0x86	; 134
      ac:	17 00       	.word	0x0017	; ????
      ae:	00 e4       	ldi	r16, 0x40	; 64
      b0:	0b 54       	subi	r16, 0x4B	; 75
      b2:	02 00       	.word	0x0002	; ????
      b4:	00 ca       	rjmp	.-3072   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b6>
      b6:	9a 3b       	cpi	r25, 0xBA	; 186
      b8:	00 00       	nop
      ba:	00 e1       	ldi	r16, 0x10	; 16
      bc:	f5 05       	cpc	r31, r5
      be:	00 00       	nop
      c0:	80 96       	adiw	r24, 0x20	; 32
      c2:	98 00       	.word	0x0098	; ????
      c4:	00 00       	nop
      c6:	40 42       	sbci	r20, 0x20	; 32
      c8:	0f 00       	.word	0x000f	; ????
      ca:	00 00       	nop
      cc:	a0 86       	std	Z+8, r10	; 0x08
      ce:	01 00       	.word	0x0001	; ????
      d0:	00 00       	nop
      d2:	10 27       	eor	r17, r16
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	e8 03       	fmulsu	r22, r16
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	64 00       	.word	0x0064	; ????
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	0a 00       	.word	0x000a	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	01 00       	.word	0x0001	; ????
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	2c 76       	andi	r18, 0x6C	; 108
      f2:	d8 88       	ldd	r13, Y+16	; 0x10
      f4:	dc 67       	ori	r29, 0x7C	; 124
      f6:	4f 08       	sbc	r4, r15
      f8:	23 df       	rcall	.-442    	; 0xffffff40 <__eeprom_end+0xff7eff40>
      fa:	c1 df       	rcall	.-126    	; 0x7e <__SREG__+0x3f>
      fc:	ae 59       	subi	r26, 0x9E	; 158
      fe:	e1 b1       	in	r30, 0x01	; 1
     100:	b7 96       	adiw	r30, 0x27	; 39
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e4 53       	subi	r30, 0x34	; 52
     106:	c6 3a       	cpi	r28, 0xA6	; 166
     108:	e6 51       	subi	r30, 0x16	; 22
     10a:	99 76       	andi	r25, 0x69	; 105
     10c:	96 e8       	ldi	r25, 0x86	; 134
     10e:	e6 c2       	rjmp	.+1484   	; 0x6dc <ComplementaryFilter+0x1d4>
     110:	84 26       	eor	r8, r20
     112:	eb 89       	ldd	r30, Y+19	; 0x13
     114:	8c 9b       	sbis	0x11, 4	; 17
     116:	62 ed       	ldi	r22, 0xD2	; 210
     118:	40 7c       	andi	r20, 0xC0	; 192
     11a:	6f fc       	.word	0xfc6f	; ????
     11c:	ef bc       	out	0x2f, r14	; 47
     11e:	9c 9f       	mul	r25, r28
     120:	40 f2       	brcs	.-112    	; 0xb2 <__trampolines_end+0x1c>
     122:	ba a5       	ldd	r27, Y+42	; 0x2a
     124:	6f a5       	ldd	r22, Y+47	; 0x2f
     126:	f4 90       	lpm	r15, Z
     128:	05 5a       	subi	r16, 0xA5	; 165
     12a:	2a f7       	brpl	.-54     	; 0xf6 <__trampolines_end+0x60>
     12c:	5c 93       	st	X, r21
     12e:	6b 6c       	ori	r22, 0xCB	; 203
     130:	f9 67       	ori	r31, 0x79	; 121
     132:	6d c1       	rjmp	.+730    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     134:	1b fc       	.word	0xfc1b	; ????
     136:	e0 e4       	ldi	r30, 0x40	; 64
     138:	0d 47       	sbci	r16, 0x7D	; 125
     13a:	fe f5       	brtc	.+126    	; 0x1ba <.do_clear_bss_loop>
     13c:	20 e6       	ldi	r18, 0x60	; 96
     13e:	b5 00       	.word	0x00b5	; ????
     140:	d0 ed       	ldi	r29, 0xD0	; 208
     142:	90 2e       	mov	r9, r16
     144:	03 00       	.word	0x0003	; ????
     146:	94 35       	cpi	r25, 0x54	; 84
     148:	77 05       	cpc	r23, r7
     14a:	00 80       	ld	r0, Z
     14c:	84 1e       	adc	r8, r20
     14e:	08 00       	.word	0x0008	; ????
     150:	00 20       	and	r0, r0
     152:	4e 0a       	sbc	r4, r30
     154:	00 00       	nop
     156:	00 c8       	rjmp	.-4096   	; 0xfffff158 <__eeprom_end+0xff7ef158>
     158:	0c 33       	cpi	r16, 0x3C	; 60
     15a:	33 33       	cpi	r19, 0x33	; 51
     15c:	33 0f       	add	r19, r19
     15e:	98 6e       	ori	r25, 0xE8	; 232
     160:	12 83       	std	Z+2, r17	; 0x02
     162:	11 41       	sbci	r17, 0x11	; 17
     164:	ef 8d       	ldd	r30, Y+31	; 0x1f
     166:	21 14       	cp	r2, r1
     168:	89 3b       	cpi	r24, 0xB9	; 185
     16a:	e6 55       	subi	r30, 0x56	; 86
     16c:	16 cf       	rjmp	.-468    	; 0xffffff9a <__eeprom_end+0xff7eff9a>
     16e:	fe e6       	ldi	r31, 0x6E	; 110
     170:	db 18       	sub	r13, r11
     172:	d1 84       	ldd	r13, Z+9	; 0x09
     174:	4b 38       	cpi	r20, 0x8B	; 139
     176:	1b f7       	brvc	.-58     	; 0x13e <__trampolines_end+0xa8>
     178:	7c 1d       	adc	r23, r12
     17a:	90 1d       	adc	r25, r0
     17c:	a4 bb       	out	0x14, r26	; 20
     17e:	e4 24       	eor	r14, r4
     180:	20 32       	cpi	r18, 0x20	; 32
     182:	84 72       	andi	r24, 0x24	; 36
     184:	5e 22       	and	r5, r30
     186:	81 00       	.word	0x0081	; ????
     188:	c9 f1       	breq	.+114    	; 0x1fc <MPU6050_Init+0x2e>
     18a:	24 ec       	ldi	r18, 0xC4	; 196
     18c:	a1 e5       	ldi	r26, 0x51	; 81
     18e:	3d 27       	eor	r19, r29

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e4 ec       	ldi	r30, 0xC4	; 196
     1a4:	fd e1       	ldi	r31, 0x1D	; 29
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a8 30       	cpi	r26, 0x08	; 8
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	a8 e0       	ldi	r26, 0x08	; 8
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a2 33       	cpi	r26, 0x32	; 50
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 3e 04 	call	0x87c	; 0x87c <main>
     1c6:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ce:	2f ef       	ldi	r18, 0xFF	; 255
     1d0:	82 e5       	ldi	r24, 0x52	; 82
     1d2:	97 e0       	ldi	r25, 0x07	; 7
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	80 40       	sbci	r24, 0x00	; 0
     1d8:	90 40       	sbci	r25, 0x00	; 0
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <MPU6050_Init+0x6>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <MPU6050_Init+0x10>
     1de:	00 00       	nop
int lastAngle = 0;											// stepper position

void MPU6050_Init()			/* Gyro initialization function */
{
	_delay_ms(150);			/* Power up time >100ms */
	I2C_Start_Wait(0xD0);	/* Start with device write address */
     1e0:	80 ed       	ldi	r24, 0xD0	; 208
     1e2:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);	/* Write to sample rate register */
     1e6:	89 e1       	ldi	r24, 0x19	; 25
     1e8:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Write(0x07);		/* 1KHz sample rate */
     1ec:	87 e0       	ldi	r24, 0x07	; 7
     1ee:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Stop();
     1f2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <I2C_Stop>

	I2C_Start_Wait(0xD0);
     1f6:	80 ed       	ldi	r24, 0xD0	; 208
     1f8:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);	/* Write to power management register */
     1fc:	8b e6       	ldi	r24, 0x6B	; 107
     1fe:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Write(0x01);		/* X axis gyroscope reference frequency */
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Stop();
     208:	0e 94 ce 05 	call	0xb9c	; 0xb9c <I2C_Stop>

	I2C_Start_Wait(0xD0);
     20c:	80 ed       	ldi	r24, 0xD0	; 208
     20e:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_Start_Wait>
	I2C_Write(CONFIG);		/* Write to Configuration register */
     212:	8a e1       	ldi	r24, 0x1A	; 26
     214:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Write(0x00);		/* Fs = 8KHz */
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Stop();
     21e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <I2C_Stop>

	I2C_Start_Wait(0xD0);
     222:	80 ed       	ldi	r24, 0xD0	; 208
     224:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);	/* Write to Gyro configuration register */
     228:	8b e1       	ldi	r24, 0x1B	; 27
     22a:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Write(0x18);		/* Full scale range +/- 2000 degree/C */
     22e:	88 e1       	ldi	r24, 0x18	; 24
     230:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Stop();
     234:	0e 94 ce 05 	call	0xb9c	; 0xb9c <I2C_Stop>

	I2C_Start_Wait(0xD0);
     238:	80 ed       	ldi	r24, 0xD0	; 208
     23a:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);	/* Write to interrupt enable register */
     23e:	88 e3       	ldi	r24, 0x38	; 56
     240:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Write(0x01);
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Stop();
     24a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <I2C_Stop>
     24e:	08 95       	ret

00000250 <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);		/* I2C start with device write address */
     250:	80 ed       	ldi	r24, 0xD0	; 208
     252:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);	/* Write start location address from where to read */ 
     256:	8b e3       	ldi	r24, 0x3B	; 59
     258:	0e 94 f7 05 	call	0xbee	; 0xbee <I2C_Write>
	I2C_Repeated_Start(0xD1);	/* I2C start with device read address */
     25c:	81 ed       	ldi	r24, 0xD1	; 209
     25e:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_Repeated_Start>
     262:	08 95       	ret

00000264 <Read_RawValue>:
}

void Read_RawValue()
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
	MPU_Start_Loc();	/* Read Gyro values */
     268:	0e 94 28 01 	call	0x250	; 0x250 <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     26c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     270:	c8 2f       	mov	r28, r24
     272:	d0 e0       	ldi	r29, 0x00	; 0
     274:	dc 2f       	mov	r29, r28
     276:	cc 27       	eor	r28, r28
     278:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     27c:	be 01       	movw	r22, r28
     27e:	68 2b       	or	r22, r24
     280:	07 2e       	mov	r0, r23
     282:	00 0c       	add	r0, r0
     284:	88 0b       	sbc	r24, r24
     286:	99 0b       	sbc	r25, r25
     288:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     28c:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <Acc_x>
     290:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <Acc_x+0x1>
     294:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Acc_x+0x2>
     298:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     29c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     2a0:	c8 2f       	mov	r28, r24
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	dc 2f       	mov	r29, r28
     2a6:	cc 27       	eor	r28, r28
     2a8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     2ac:	be 01       	movw	r22, r28
     2ae:	68 2b       	or	r22, r24
     2b0:	07 2e       	mov	r0, r23
     2b2:	00 0c       	add	r0, r0
     2b4:	88 0b       	sbc	r24, r24
     2b6:	99 0b       	sbc	r25, r25
     2b8:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     2bc:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <Acc_y>
     2c0:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <Acc_y+0x1>
     2c4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Acc_y+0x2>
     2c8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     2cc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     2d0:	c8 2f       	mov	r28, r24
     2d2:	d0 e0       	ldi	r29, 0x00	; 0
     2d4:	dc 2f       	mov	r29, r28
     2d6:	cc 27       	eor	r28, r28
     2d8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     2dc:	be 01       	movw	r22, r28
     2de:	68 2b       	or	r22, r24
     2e0:	07 2e       	mov	r0, r23
     2e2:	00 0c       	add	r0, r0
     2e4:	88 0b       	sbc	r24, r24
     2e6:	99 0b       	sbc	r25, r25
     2e8:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     2ec:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <Acc_z>
     2f0:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <Acc_z+0x1>
     2f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Acc_z+0x2>
     2f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Acc_z+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     2fc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     300:	c8 2f       	mov	r28, r24
     302:	d0 e0       	ldi	r29, 0x00	; 0
     304:	dc 2f       	mov	r29, r28
     306:	cc 27       	eor	r28, r28
     308:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     30c:	be 01       	movw	r22, r28
     30e:	68 2b       	or	r22, r24
     310:	07 2e       	mov	r0, r23
     312:	00 0c       	add	r0, r0
     314:	88 0b       	sbc	r24, r24
     316:	99 0b       	sbc	r25, r25
     318:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     31c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <Temperature>
     320:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <Temperature+0x1>
     324:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Temperature+0x2>
     328:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     32c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     330:	c8 2f       	mov	r28, r24
     332:	d0 e0       	ldi	r29, 0x00	; 0
     334:	dc 2f       	mov	r29, r28
     336:	cc 27       	eor	r28, r28
     338:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     33c:	be 01       	movw	r22, r28
     33e:	68 2b       	or	r22, r24
     340:	07 2e       	mov	r0, r23
     342:	00 0c       	add	r0, r0
     344:	88 0b       	sbc	r24, r24
     346:	99 0b       	sbc	r25, r25
     348:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     34c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <Gyro_x>
     350:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <Gyro_x+0x1>
     354:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Gyro_x+0x2>
     358:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     35c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     360:	c8 2f       	mov	r28, r24
     362:	d0 e0       	ldi	r29, 0x00	; 0
     364:	dc 2f       	mov	r29, r28
     366:	cc 27       	eor	r28, r28
     368:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     36c:	be 01       	movw	r22, r28
     36e:	68 2b       	or	r22, r24
     370:	07 2e       	mov	r0, r23
     372:	00 0c       	add	r0, r0
     374:	88 0b       	sbc	r24, r24
     376:	99 0b       	sbc	r25, r25
     378:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     37c:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <Gyro_y>
     380:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <Gyro_y+0x1>
     384:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Gyro_y+0x2>
     388:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     38c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <I2C_Read_Ack>
     390:	c8 2f       	mov	r28, r24
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	dc 2f       	mov	r29, r28
     396:	cc 27       	eor	r28, r28
     398:	0e 94 17 06 	call	0xc2e	; 0xc2e <I2C_Read_Nack>
     39c:	be 01       	movw	r22, r28
     39e:	68 2b       	or	r22, r24
     3a0:	07 2e       	mov	r0, r23
     3a2:	00 0c       	add	r0, r0
     3a4:	88 0b       	sbc	r24, r24
     3a6:	99 0b       	sbc	r25, r25
     3a8:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     3ac:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <Gyro_z>
     3b0:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <Gyro_z+0x1>
     3b4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Gyro_z+0x2>
     3b8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Gyro_z+0x3>
	I2C_Stop();
     3bc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <I2C_Stop>
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <getAngle>:

void getAngle(int Ax,int Ay,int Az)
{
     3c6:	4f 92       	push	r4
     3c8:	5f 92       	push	r5
     3ca:	6f 92       	push	r6
     3cc:	7f 92       	push	r7
     3ce:	8f 92       	push	r8
     3d0:	9f 92       	push	r9
     3d2:	af 92       	push	r10
     3d4:	bf 92       	push	r11
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <getAngle+0x1e>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <getAngle+0x20>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	6b 01       	movw	r12, r22
     3ec:	7a 01       	movw	r14, r20
	double x = Ax;
     3ee:	bc 01       	movw	r22, r24
     3f0:	99 0f       	add	r25, r25
     3f2:	88 0b       	sbc	r24, r24
     3f4:	99 0b       	sbc	r25, r25
     3f6:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     3fa:	4b 01       	movw	r8, r22
     3fc:	5c 01       	movw	r10, r24
	double y = Ay;
     3fe:	b6 01       	movw	r22, r12
     400:	dd 0c       	add	r13, r13
     402:	88 0b       	sbc	r24, r24
     404:	99 0b       	sbc	r25, r25
     406:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     40a:	69 83       	std	Y+1, r22	; 0x01
     40c:	7a 83       	std	Y+2, r23	; 0x02
     40e:	8b 83       	std	Y+3, r24	; 0x03
     410:	9c 83       	std	Y+4, r25	; 0x04
	double z = Az;
     412:	b7 01       	movw	r22, r14
     414:	ff 0c       	add	r15, r15
     416:	88 0b       	sbc	r24, r24
     418:	99 0b       	sbc	r25, r25
     41a:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     41e:	6b 01       	movw	r12, r22
     420:	7c 01       	movw	r14, r24
	pitch = atan(x/sqrt((y*y) + (z*z)));	// pitch calculation
     422:	29 81       	ldd	r18, Y+1	; 0x01
     424:	3a 81       	ldd	r19, Y+2	; 0x02
     426:	4b 81       	ldd	r20, Y+3	; 0x03
     428:	5c 81       	ldd	r21, Y+4	; 0x04
     42a:	ca 01       	movw	r24, r20
     42c:	b9 01       	movw	r22, r18
     42e:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     432:	2b 01       	movw	r4, r22
     434:	3c 01       	movw	r6, r24
     436:	a7 01       	movw	r20, r14
     438:	96 01       	movw	r18, r12
     43a:	c7 01       	movw	r24, r14
     43c:	b6 01       	movw	r22, r12
     43e:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     442:	6b 01       	movw	r12, r22
     444:	7c 01       	movw	r14, r24
     446:	a7 01       	movw	r20, r14
     448:	96 01       	movw	r18, r12
     44a:	c3 01       	movw	r24, r6
     44c:	b2 01       	movw	r22, r4
     44e:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     452:	0e 94 29 09 	call	0x1252	; 0x1252 <sqrt>
     456:	9b 01       	movw	r18, r22
     458:	ac 01       	movw	r20, r24
     45a:	c5 01       	movw	r24, r10
     45c:	b4 01       	movw	r22, r8
     45e:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     462:	0e 94 22 07 	call	0xe44	; 0xe44 <atan>
     466:	2b 01       	movw	r4, r22
     468:	3c 01       	movw	r6, r24
	roll = atan(y/sqrt((x*x) + (z*z)));		// roll calculation
     46a:	a5 01       	movw	r20, r10
     46c:	94 01       	movw	r18, r8
     46e:	c5 01       	movw	r24, r10
     470:	b4 01       	movw	r22, r8
     472:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     476:	4b 01       	movw	r8, r22
     478:	5c 01       	movw	r10, r24
     47a:	a5 01       	movw	r20, r10
     47c:	94 01       	movw	r18, r8
     47e:	c7 01       	movw	r24, r14
     480:	b6 01       	movw	r22, r12
     482:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     486:	0e 94 29 09 	call	0x1252	; 0x1252 <sqrt>
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
     48e:	69 81       	ldd	r22, Y+1	; 0x01
     490:	7a 81       	ldd	r23, Y+2	; 0x02
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     49a:	0e 94 22 07 	call	0xe44	; 0xe44 <atan>
     49e:	6b 01       	movw	r12, r22
     4a0:	7c 01       	movw	r14, r24
	//converting radians into degrees
	pitch = pitch * (180.0/3.14);
     4a2:	23 ea       	ldi	r18, 0xA3	; 163
     4a4:	3c e4       	ldi	r19, 0x4C	; 76
     4a6:	45 e6       	ldi	r20, 0x65	; 101
     4a8:	52 e4       	ldi	r21, 0x42	; 66
     4aa:	c3 01       	movw	r24, r6
     4ac:	b2 01       	movw	r22, r4
     4ae:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     4b2:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <pitch>
     4b6:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <pitch+0x1>
     4ba:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <pitch+0x2>
     4be:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <pitch+0x3>
	roll = roll * (180.0/3.14) ;
     4c2:	23 ea       	ldi	r18, 0xA3	; 163
     4c4:	3c e4       	ldi	r19, 0x4C	; 76
     4c6:	45 e6       	ldi	r20, 0x65	; 101
     4c8:	52 e4       	ldi	r21, 0x42	; 66
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     4d2:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <roll>
     4d6:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <roll+0x1>
     4da:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <roll+0x2>
     4de:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <roll+0x3>
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	bf 90       	pop	r11
     4f8:	af 90       	pop	r10
     4fa:	9f 90       	pop	r9
     4fc:	8f 90       	pop	r8
     4fe:	7f 90       	pop	r7
     500:	6f 90       	pop	r6
     502:	5f 90       	pop	r5
     504:	4f 90       	pop	r4
     506:	08 95       	ret

00000508 <ComplementaryFilter>:

void ComplementaryFilter()
{
     508:	4f 92       	push	r4
     50a:	5f 92       	push	r5
     50c:	6f 92       	push	r6
     50e:	7f 92       	push	r7
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	2a 97       	sbiw	r28, 0x0a	; 10
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
	float pitchAcc, rollAcc;
	// Integrate the gyroscope data -> int(angularSpeed) = angle
	pitch += ((float)Gyro_x / GYROSCOPE_SENSITIVITY) * dt; // Angle around the X-axis
     534:	23 e3       	ldi	r18, 0x33	; 51
     536:	33 e3       	ldi	r19, 0x33	; 51
     538:	43 e8       	ldi	r20, 0x83	; 131
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Gyro_x>
     540:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Gyro_x+0x1>
     544:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Gyro_x+0x2>
     548:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Gyro_x+0x3>
     54c:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     550:	2a e0       	ldi	r18, 0x0A	; 10
     552:	37 ed       	ldi	r19, 0xD7	; 215
     554:	43 e2       	ldi	r20, 0x23	; 35
     556:	5c e3       	ldi	r21, 0x3C	; 60
     558:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     55c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <pitch>
     560:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <pitch+0x1>
     564:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <pitch+0x2>
     568:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <pitch+0x3>
     56c:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     570:	4b 01       	movw	r8, r22
     572:	5c 01       	movw	r10, r24
     574:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <pitch>
     578:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <pitch+0x1>
     57c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <pitch+0x2>
     580:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <pitch+0x3>
	roll -= ((float)Gyro_y / GYROSCOPE_SENSITIVITY) * dt; // Angle around the Y-axis
     584:	23 e3       	ldi	r18, 0x33	; 51
     586:	33 e3       	ldi	r19, 0x33	; 51
     588:	43 e8       	ldi	r20, 0x83	; 131
     58a:	51 e4       	ldi	r21, 0x41	; 65
     58c:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Gyro_y>
     590:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <Gyro_y+0x1>
     594:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Gyro_y+0x2>
     598:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <Gyro_y+0x3>
     59c:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     5a0:	2a e0       	ldi	r18, 0x0A	; 10
     5a2:	37 ed       	ldi	r19, 0xD7	; 215
     5a4:	43 e2       	ldi	r20, 0x23	; 35
     5a6:	5c e3       	ldi	r21, 0x3C	; 60
     5a8:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <roll>
     5b4:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <roll+0x1>
     5b8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <roll+0x2>
     5bc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <roll+0x3>
     5c0:	0e 94 72 06 	call	0xce4	; 0xce4 <__subsf3>
     5c4:	69 83       	std	Y+1, r22	; 0x01
     5c6:	7a 83       	std	Y+2, r23	; 0x02
     5c8:	8b 83       	std	Y+3, r24	; 0x03
     5ca:	9c 83       	std	Y+4, r25	; 0x04
     5cc:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <roll>
     5d0:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <roll+0x1>
     5d4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <roll+0x2>
     5d8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <roll+0x3>
	//yaw += ((float)Gyro_z / GYROSCOPE_SENSITIVITY) * dt;
	// Compensate for drift with accelerometer data if !bullshit
	// Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
	int forceMagnitudeApprox = abs(Acc_x) + abs(Acc_y) + abs(Acc_z);
     5dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Acc_x>
     5e0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Acc_x+0x1>
     5e4:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <Acc_x+0x2>
     5e8:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <Acc_x+0x3>
     5ec:	8d 83       	std	Y+5, r24	; 0x05
     5ee:	9e 83       	std	Y+6, r25	; 0x06
     5f0:	af 83       	std	Y+7, r26	; 0x07
     5f2:	b8 87       	std	Y+8, r27	; 0x08
     5f4:	bc 01       	movw	r22, r24
     5f6:	cd 01       	movw	r24, r26
     5f8:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
     5fc:	7a 87       	std	Y+10, r23	; 0x0a
     5fe:	69 87       	std	Y+9, r22	; 0x09
     600:	db 01       	movw	r26, r22
     602:	bb 23       	and	r27, r27
     604:	34 f4       	brge	.+12     	; 0x612 <ComplementaryFilter+0x10a>
     606:	22 27       	eor	r18, r18
     608:	33 27       	eor	r19, r19
     60a:	26 1b       	sub	r18, r22
     60c:	37 0b       	sbc	r19, r23
     60e:	3a 87       	std	Y+10, r19	; 0x0a
     610:	29 87       	std	Y+9, r18	; 0x09
     612:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <Acc_y>
     616:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <Acc_y+0x1>
     61a:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <Acc_y+0x2>
     61e:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <Acc_y+0x3>
     622:	c3 01       	movw	r24, r6
     624:	b2 01       	movw	r22, r4
     626:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
     62a:	9b 01       	movw	r18, r22
     62c:	77 23       	and	r23, r23
     62e:	24 f4       	brge	.+8      	; 0x638 <ComplementaryFilter+0x130>
     630:	22 27       	eor	r18, r18
     632:	33 27       	eor	r19, r19
     634:	26 1b       	sub	r18, r22
     636:	37 0b       	sbc	r19, r23
     638:	a9 85       	ldd	r26, Y+9	; 0x09
     63a:	ba 85       	ldd	r27, Y+10	; 0x0a
     63c:	a2 0f       	add	r26, r18
     63e:	b3 1f       	adc	r27, r19
     640:	ba 87       	std	Y+10, r27	; 0x0a
     642:	a9 87       	std	Y+9, r26	; 0x09
     644:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <Acc_z>
     648:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <Acc_z+0x1>
     64c:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <Acc_z+0x2>
     650:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <Acc_z+0x3>
     654:	c7 01       	movw	r24, r14
     656:	b6 01       	movw	r22, r12
     658:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
     65c:	9b 01       	movw	r18, r22
     65e:	77 23       	and	r23, r23
     660:	24 f4       	brge	.+8      	; 0x66a <ComplementaryFilter+0x162>
     662:	22 27       	eor	r18, r18
     664:	33 27       	eor	r19, r19
     666:	26 1b       	sub	r18, r22
     668:	37 0b       	sbc	r19, r23
     66a:	89 85       	ldd	r24, Y+9	; 0x09
     66c:	9a 85       	ldd	r25, Y+10	; 0x0a
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
	if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	90 42       	sbci	r25, 0x20	; 32
     676:	0c f4       	brge	.+2      	; 0x67a <ComplementaryFilter+0x172>
     678:	6c c0       	rjmp	.+216    	; 0x752 <ComplementaryFilter+0x24a>
	{
		// Turning around the X axis results in a vector on the Y-axis
		pitchAcc = atan2f((float)Acc_y, (float)Acc_z) * 180 / M_PI;
     67a:	a7 01       	movw	r20, r14
     67c:	96 01       	movw	r18, r12
     67e:	c3 01       	movw	r24, r6
     680:	b2 01       	movw	r22, r4
     682:	0e 94 f2 06 	call	0xde4	; 0xde4 <atan2>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	44 e3       	ldi	r20, 0x34	; 52
     68c:	53 e4       	ldi	r21, 0x43	; 67
     68e:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     692:	2b ed       	ldi	r18, 0xDB	; 219
     694:	3f e0       	ldi	r19, 0x0F	; 15
     696:	49 e4       	ldi	r20, 0x49	; 73
     698:	50 e4       	ldi	r21, 0x40	; 64
     69a:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     69e:	2b 01       	movw	r4, r22
     6a0:	3c 01       	movw	r6, r24
		pitch = pitch * 0.98 + pitchAcc * 0.02;
     6a2:	28 e4       	ldi	r18, 0x48	; 72
     6a4:	31 ee       	ldi	r19, 0xE1	; 225
     6a6:	4a e7       	ldi	r20, 0x7A	; 122
     6a8:	5f e3       	ldi	r21, 0x3F	; 63
     6aa:	c5 01       	movw	r24, r10
     6ac:	b4 01       	movw	r22, r8
     6ae:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     6b2:	4b 01       	movw	r8, r22
     6b4:	5c 01       	movw	r10, r24
     6b6:	2a e0       	ldi	r18, 0x0A	; 10
     6b8:	37 ed       	ldi	r19, 0xD7	; 215
     6ba:	43 ea       	ldi	r20, 0xA3	; 163
     6bc:	5c e3       	ldi	r21, 0x3C	; 60
     6be:	c3 01       	movw	r24, r6
     6c0:	b2 01       	movw	r22, r4
     6c2:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	c5 01       	movw	r24, r10
     6cc:	b4 01       	movw	r22, r8
     6ce:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     6d2:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <pitch>
     6d6:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <pitch+0x1>
     6da:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <pitch+0x2>
     6de:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <pitch+0x3>
		// Turning around the Y axis results in a vector on the X-axis
		rollAcc = atan2f((float)Acc_x, (float)Acc_z) * 180 / M_PI;
     6e2:	a7 01       	movw	r20, r14
     6e4:	96 01       	movw	r18, r12
     6e6:	6d 81       	ldd	r22, Y+5	; 0x05
     6e8:	7e 81       	ldd	r23, Y+6	; 0x06
     6ea:	8f 81       	ldd	r24, Y+7	; 0x07
     6ec:	98 85       	ldd	r25, Y+8	; 0x08
     6ee:	0e 94 f2 06 	call	0xde4	; 0xde4 <atan2>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	44 e3       	ldi	r20, 0x34	; 52
     6f8:	53 e4       	ldi	r21, 0x43	; 67
     6fa:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     6fe:	2b ed       	ldi	r18, 0xDB	; 219
     700:	3f e0       	ldi	r19, 0x0F	; 15
     702:	49 e4       	ldi	r20, 0x49	; 73
     704:	50 e4       	ldi	r21, 0x40	; 64
     706:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     70a:	4b 01       	movw	r8, r22
     70c:	5c 01       	movw	r10, r24
		roll = roll * 0.98 + rollAcc * 0.02;
     70e:	28 e4       	ldi	r18, 0x48	; 72
     710:	31 ee       	ldi	r19, 0xE1	; 225
     712:	4a e7       	ldi	r20, 0x7A	; 122
     714:	5f e3       	ldi	r21, 0x3F	; 63
     716:	69 81       	ldd	r22, Y+1	; 0x01
     718:	7a 81       	ldd	r23, Y+2	; 0x02
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	9c 81       	ldd	r25, Y+4	; 0x04
     71e:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     722:	6b 01       	movw	r12, r22
     724:	7c 01       	movw	r14, r24
     726:	2a e0       	ldi	r18, 0x0A	; 10
     728:	37 ed       	ldi	r19, 0xD7	; 215
     72a:	43 ea       	ldi	r20, 0xA3	; 163
     72c:	5c e3       	ldi	r21, 0x3C	; 60
     72e:	c5 01       	movw	r24, r10
     730:	b4 01       	movw	r22, r8
     732:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	c7 01       	movw	r24, r14
     73c:	b6 01       	movw	r22, r12
     73e:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     742:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <roll>
     746:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <roll+0x1>
     74a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <roll+0x2>
     74e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <roll+0x3>
	}
}
     752:	2a 96       	adiw	r28, 0x0a	; 10
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	bf 90       	pop	r11
     76c:	af 90       	pop	r10
     76e:	9f 90       	pop	r9
     770:	8f 90       	pop	r8
     772:	7f 90       	pop	r7
     774:	6f 90       	pop	r6
     776:	5f 90       	pop	r5
     778:	4f 90       	pop	r4
     77a:	08 95       	ret

0000077c <getStepperAngle>:

void getStepperAngle() {
	int currentAngle = (int)(roll);				// get current roll angle
     77c:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <roll>
     780:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <roll+0x1>
     784:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <roll+0x2>
     788:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <roll+0x3>
     78c:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
	int deltaAngle = lastAngle - currentAngle;	// calc delta angle
     790:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     794:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     798:	26 1b       	sub	r18, r22
     79a:	37 0b       	sbc	r19, r23
	lastAngle -= deltaAngle;					// update stepper angle
     79c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <__data_end+0x1>
     7a0:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
	// Rotate Stepper Motor Clockwise
	if (deltaAngle < 0) {
     7a4:	33 23       	and	r19, r19
     7a6:	6c f5       	brge	.+90     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7a8:	22 c0       	rjmp	.+68     	; 0x7ee <getStepperAngle+0x72>
		for(int i=0;i<(-deltaAngle);i++)		
		{
			PORTB = 0x09;
     7aa:	49 e0       	ldi	r20, 0x09	; 9
     7ac:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ae:	ef e1       	ldi	r30, 0x1F	; 31
     7b0:	fe e4       	ldi	r31, 0x4E	; 78
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <getStepperAngle+0x36>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <getStepperAngle+0x3c>
     7b8:	00 00       	nop
			_delay_us(period);
			PORTB = 0x0C;
     7ba:	4c e0       	ldi	r20, 0x0C	; 12
     7bc:	45 b9       	out	0x05, r20	; 5
     7be:	ef e1       	ldi	r30, 0x1F	; 31
     7c0:	fe e4       	ldi	r31, 0x4E	; 78
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <getStepperAngle+0x46>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <getStepperAngle+0x4c>
     7c8:	00 00       	nop
			_delay_us(period);
			PORTB = 0x06;
     7ca:	46 e0       	ldi	r20, 0x06	; 6
     7cc:	45 b9       	out	0x05, r20	; 5
     7ce:	ef e1       	ldi	r30, 0x1F	; 31
     7d0:	fe e4       	ldi	r31, 0x4E	; 78
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <getStepperAngle+0x56>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <getStepperAngle+0x5c>
     7d8:	00 00       	nop
			_delay_us(period);
			PORTB = 0x03;
     7da:	43 e0       	ldi	r20, 0x03	; 3
     7dc:	45 b9       	out	0x05, r20	; 5
     7de:	ef e1       	ldi	r30, 0x1F	; 31
     7e0:	fe e4       	ldi	r31, 0x4E	; 78
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <getStepperAngle+0x66>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <getStepperAngle+0x6c>
     7e8:	00 00       	nop
	int currentAngle = (int)(roll);				// get current roll angle
	int deltaAngle = lastAngle - currentAngle;	// calc delta angle
	lastAngle -= deltaAngle;					// update stepper angle
	// Rotate Stepper Motor Clockwise
	if (deltaAngle < 0) {
		for(int i=0;i<(-deltaAngle);i++)		
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <getStepperAngle+0x76>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	44 27       	eor	r20, r20
     7f4:	55 27       	eor	r21, r21
     7f6:	42 1b       	sub	r20, r18
     7f8:	53 0b       	sbc	r21, r19
     7fa:	84 17       	cp	r24, r20
     7fc:	95 07       	cpc	r25, r21
     7fe:	ac f2       	brlt	.-86     	; 0x7aa <getStepperAngle+0x2e>
     800:	2b c0       	rjmp	.+86     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			PORTB = 0x03;
			_delay_us(period);
		}
	}
	// Rotate Stepper Motor Anticlockwise
	else if (deltaAngle > 0) {
     802:	12 16       	cp	r1, r18
     804:	13 06       	cpc	r1, r19
     806:	1c f1       	brlt	.+70     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     808:	27 c0       	rjmp	.+78     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		for(int i=0;i<(deltaAngle);i++)			
		{
			PORTB = 0x09;
     80a:	49 e0       	ldi	r20, 0x09	; 9
     80c:	45 b9       	out	0x05, r20	; 5
     80e:	ef e1       	ldi	r30, 0x1F	; 31
     810:	fe e4       	ldi	r31, 0x4E	; 78
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     818:	00 00       	nop
			_delay_us(period);
			PORTB = 0x03;
     81a:	43 e0       	ldi	r20, 0x03	; 3
     81c:	45 b9       	out	0x05, r20	; 5
     81e:	ef e1       	ldi	r30, 0x1F	; 31
     820:	fe e4       	ldi	r31, 0x4E	; 78
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     828:	00 00       	nop
			_delay_us(period);
			PORTB = 0x06;
     82a:	46 e0       	ldi	r20, 0x06	; 6
     82c:	45 b9       	out	0x05, r20	; 5
     82e:	ef e1       	ldi	r30, 0x1F	; 31
     830:	fe e4       	ldi	r31, 0x4E	; 78
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     838:	00 00       	nop
			_delay_us(period);
			PORTB = 0x0C;
     83a:	4c e0       	ldi	r20, 0x0C	; 12
     83c:	45 b9       	out	0x05, r20	; 5
     83e:	ef e1       	ldi	r30, 0x1F	; 31
     840:	fe e4       	ldi	r31, 0x4E	; 78
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     846:	00 c0       	rjmp	.+0      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     848:	00 00       	nop
			_delay_us(period);
		}
	}
	// Rotate Stepper Motor Anticlockwise
	else if (deltaAngle > 0) {
		for(int i=0;i<(deltaAngle);i++)			
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	82 17       	cp	r24, r18
     854:	93 07       	cpc	r25, r19
     856:	cc f2       	brlt	.-78     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		}
	}
	// Do nothing at angle 0
	else {}

	PORTB = 0x09;			/* last one step to acquire initial position */
     858:	89 e0       	ldi	r24, 0x09	; 9
     85a:	85 b9       	out	0x05, r24	; 5
     85c:	8f e1       	ldi	r24, 0x1F	; 31
     85e:	9e e4       	ldi	r25, 0x4E	; 78
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     866:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     868:	9f ef       	ldi	r25, 0xFF	; 255
     86a:	e1 ee       	ldi	r30, 0xE1	; 225
     86c:	f4 e0       	ldi	r31, 0x04	; 4
     86e:	91 50       	subi	r25, 0x01	; 1
     870:	e0 40       	sbci	r30, 0x00	; 0
     872:	f0 40       	sbci	r31, 0x00	; 0
     874:	e1 f7       	brne	.-8      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     876:	00 c0       	rjmp	.+0      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     878:	00 00       	nop
     87a:	08 95       	ret

0000087c <main>:
	_delay_us(period);
	_delay_ms(100);
}

int main()
{
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	e6 97       	sbiw	r28, 0x36	; 54
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20], float_[10];
	float Xa,Ya,Za,t;
	float Xg=0,Yg=0,Zg=0;
	
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<<PB3);	//DDRB lower pins as output
     890:	84 b1       	in	r24, 0x04	; 4
     892:	8f 60       	ori	r24, 0x0F	; 15
     894:	84 b9       	out	0x04, r24	; 4
	
	I2C_Init();			/* Initialize I2C */
     896:	0e 94 a4 05 	call	0xb48	; 0xb48 <I2C_Init>
	MPU6050_Init();		/* Initialize MPU6050 */
     89a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <MPU6050_Init>
	USART_Init(9600);	/* Initialize USART with 9600 baud rate */
     89e:	60 e8       	ldi	r22, 0x80	; 128
     8a0:	75 e2       	ldi	r23, 0x25	; 37
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 21 06 	call	0xc42	; 0xc42 <USART_Init>
	
	while(1)
	{
		Read_RawValue();
     8aa:	0e 94 32 01 	call	0x264	; 0x264 <Read_RawValue>

		Xa = Acc_x/16384.0;				/* Divide raw value by sensitivity scale factor to get real values */
     8ae:	40 90 1e 01 	lds	r4, 0x011E	; 0x80011e <Acc_x>
     8b2:	50 90 1f 01 	lds	r5, 0x011F	; 0x80011f <Acc_x+0x1>
     8b6:	60 90 20 01 	lds	r6, 0x0120	; 0x800120 <Acc_x+0x2>
     8ba:	70 90 21 01 	lds	r7, 0x0121	; 0x800121 <Acc_x+0x3>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e8       	ldi	r20, 0x80	; 128
     8c4:	58 e3       	ldi	r21, 0x38	; 56
     8c6:	c3 01       	movw	r24, r6
     8c8:	b2 01       	movw	r22, r4
     8ca:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     8ce:	6f 8f       	std	Y+31, r22	; 0x1f
     8d0:	78 a3       	std	Y+32, r23	; 0x20
     8d2:	89 a3       	std	Y+33, r24	; 0x21
     8d4:	9a a3       	std	Y+34, r25	; 0x22
		Ya = Acc_y/16384.0;
     8d6:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <Acc_y>
     8da:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <Acc_y+0x1>
     8de:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <Acc_y+0x2>
     8e2:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <Acc_y+0x3>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e8       	ldi	r20, 0x80	; 128
     8ec:	58 e3       	ldi	r21, 0x38	; 56
     8ee:	c7 01       	movw	r24, r14
     8f0:	b6 01       	movw	r22, r12
     8f2:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     8f6:	6b a3       	std	Y+35, r22	; 0x23
     8f8:	7c a3       	std	Y+36, r23	; 0x24
     8fa:	8d a3       	std	Y+37, r24	; 0x25
     8fc:	9e a3       	std	Y+38, r25	; 0x26
		Za = Acc_z/16384.0;
     8fe:	80 90 0a 01 	lds	r8, 0x010A	; 0x80010a <Acc_z>
     902:	90 90 0b 01 	lds	r9, 0x010B	; 0x80010b <Acc_z+0x1>
     906:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <Acc_z+0x2>
     90a:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <Acc_z+0x3>
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e8       	ldi	r20, 0x80	; 128
     914:	58 e3       	ldi	r21, 0x38	; 56
     916:	c5 01       	movw	r24, r10
     918:	b4 01       	movw	r22, r8
     91a:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     91e:	6f a3       	std	Y+39, r22	; 0x27
     920:	78 a7       	std	Y+40, r23	; 0x28
     922:	89 a7       	std	Y+41, r24	; 0x29
     924:	9a a7       	std	Y+42, r25	; 0x2a
		
		Xg = Gyro_x/16.4;
     926:	23 e3       	ldi	r18, 0x33	; 51
     928:	33 e3       	ldi	r19, 0x33	; 51
     92a:	43 e8       	ldi	r20, 0x83	; 131
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Gyro_x>
     932:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Gyro_x+0x1>
     936:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Gyro_x+0x2>
     93a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Gyro_x+0x3>
     93e:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     942:	6b a7       	std	Y+43, r22	; 0x2b
     944:	7c a7       	std	Y+44, r23	; 0x2c
     946:	8d a7       	std	Y+45, r24	; 0x2d
     948:	9e a7       	std	Y+46, r25	; 0x2e
		Yg = Gyro_y/16.4;
     94a:	23 e3       	ldi	r18, 0x33	; 51
     94c:	33 e3       	ldi	r19, 0x33	; 51
     94e:	43 e8       	ldi	r20, 0x83	; 131
     950:	51 e4       	ldi	r21, 0x41	; 65
     952:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Gyro_y>
     956:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <Gyro_y+0x1>
     95a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Gyro_y+0x2>
     95e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <Gyro_y+0x3>
     962:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     966:	6f a7       	std	Y+47, r22	; 0x2f
     968:	78 ab       	std	Y+48, r23	; 0x30
     96a:	89 ab       	std	Y+49, r24	; 0x31
     96c:	9a ab       	std	Y+50, r25	; 0x32
		Zg = Gyro_z/16.4;
     96e:	23 e3       	ldi	r18, 0x33	; 51
     970:	33 e3       	ldi	r19, 0x33	; 51
     972:	43 e8       	ldi	r20, 0x83	; 131
     974:	51 e4       	ldi	r21, 0x41	; 65
     976:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Gyro_z>
     97a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <Gyro_z+0x1>
     97e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Gyro_z+0x2>
     982:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Gyro_z+0x3>
     986:	0e 94 51 07 	call	0xea2	; 0xea2 <__divsf3>
     98a:	6b ab       	std	Y+51, r22	; 0x33
     98c:	7c ab       	std	Y+52, r23	; 0x34
     98e:	8d ab       	std	Y+53, r24	; 0x35
     990:	9e ab       	std	Y+54, r25	; 0x36

		t = (Temperature/340.00)+36.53;	/* Convert temperature in ?/c using formula */
		
		getAngle(Acc_x,Acc_y,Acc_z);	// calculate roll and pitch
     992:	c5 01       	movw	r24, r10
     994:	b4 01       	movw	r22, r8
     996:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
     99a:	4b 01       	movw	r8, r22
     99c:	5c 01       	movw	r10, r24
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
     9a6:	6b 01       	movw	r12, r22
     9a8:	7c 01       	movw	r14, r24
     9aa:	c3 01       	movw	r24, r6
     9ac:	b2 01       	movw	r22, r4
     9ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixsfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	a4 01       	movw	r20, r8
     9b8:	b6 01       	movw	r22, r12
     9ba:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <getAngle>
		ComplementaryFilter();			// apply complementary filter (ignoring yaw as stated in class)
     9be:	0e 94 84 02 	call	0x508	; 0x508 <ComplementaryFilter>
		
		getStepperAngle();				// control stepper motor with roll
     9c2:	0e 94 be 03 	call	0x77c	; 0x77c <getStepperAngle>
		
		dtostrf( Xa, 3, 2, float_ );	/* Take values in buffer to send all parameters over USART */
     9c6:	7e 01       	movw	r14, r28
     9c8:	85 e1       	ldi	r24, 0x15	; 21
     9ca:	e8 0e       	add	r14, r24
     9cc:	f1 1c       	adc	r15, r1
     9ce:	87 01       	movw	r16, r14
     9d0:	22 e0       	ldi	r18, 0x02	; 2
     9d2:	43 e0       	ldi	r20, 0x03	; 3
     9d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9d6:	78 a1       	ldd	r23, Y+32	; 0x20
     9d8:	89 a1       	ldd	r24, Y+33	; 0x21
     9da:	9a a1       	ldd	r25, Y+34	; 0x22
     9dc:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Ax
     9e0:	ff 92       	push	r15
     9e2:	ef 92       	push	r14
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	af 2e       	mov	r10, r31
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	bf 2e       	mov	r11, r31
     9ee:	f0 2d       	mov	r31, r0
     9f0:	bf 92       	push	r11
     9f2:	af 92       	push	r10
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	6c 01       	movw	r12, r24
     9fa:	9f 93       	push	r25
     9fc:	8f 93       	push	r24
     9fe:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     a02:	c6 01       	movw	r24, r12
     a04:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		
		dtostrf( Ya, 3, 2, float_ );
     a08:	22 e0       	ldi	r18, 0x02	; 2
     a0a:	43 e0       	ldi	r20, 0x03	; 3
     a0c:	6b a1       	ldd	r22, Y+35	; 0x23
     a0e:	7c a1       	ldd	r23, Y+36	; 0x24
     a10:	8d a1       	ldd	r24, Y+37	; 0x25
     a12:	9e a1       	ldd	r25, Y+38	; 0x26
     a14:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Ay
     a18:	ff 92       	push	r15
     a1a:	ef 92       	push	r14
     a1c:	bf 92       	push	r11
     a1e:	af 92       	push	r10
     a20:	df 92       	push	r13
     a22:	cf 92       	push	r12
     a24:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     a28:	c6 01       	movw	r24, r12
     a2a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		
		dtostrf( Za, 3, 2, float_ );
     a2e:	22 e0       	ldi	r18, 0x02	; 2
     a30:	43 e0       	ldi	r20, 0x03	; 3
     a32:	6f a1       	ldd	r22, Y+39	; 0x27
     a34:	78 a5       	ldd	r23, Y+40	; 0x28
     a36:	89 a5       	ldd	r24, Y+41	; 0x29
     a38:	9a a5       	ldd	r25, Y+42	; 0x2a
     a3a:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Az
     a3e:	ff 92       	push	r15
     a40:	ef 92       	push	r14
     a42:	bf 92       	push	r11
     a44:	af 92       	push	r10
     a46:	df 92       	push	r13
     a48:	cf 92       	push	r12
     a4a:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     a4e:	c6 01       	movw	r24, r12
     a50:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		
		dtostrf( Xg, 3, 2, float_ );
     a54:	22 e0       	ldi	r18, 0x02	; 2
     a56:	43 e0       	ldi	r20, 0x03	; 3
     a58:	6b a5       	ldd	r22, Y+43	; 0x2b
     a5a:	7c a5       	ldd	r23, Y+44	; 0x2c
     a5c:	8d a5       	ldd	r24, Y+45	; 0x2d
     a5e:	9e a5       	ldd	r25, Y+46	; 0x2e
     a60:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Gx
     a64:	ff 92       	push	r15
     a66:	ef 92       	push	r14
     a68:	bf 92       	push	r11
     a6a:	af 92       	push	r10
     a6c:	df 92       	push	r13
     a6e:	cf 92       	push	r12
     a70:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     a74:	c6 01       	movw	r24, r12
     a76:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		
		dtostrf( Yg, 3, 2, float_ );
     a7a:	22 e0       	ldi	r18, 0x02	; 2
     a7c:	43 e0       	ldi	r20, 0x03	; 3
     a7e:	6f a5       	ldd	r22, Y+47	; 0x2f
     a80:	78 a9       	ldd	r23, Y+48	; 0x30
     a82:	89 a9       	ldd	r24, Y+49	; 0x31
     a84:	9a a9       	ldd	r25, Y+50	; 0x32
     a86:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Gy
     a8a:	ff 92       	push	r15
     a8c:	ef 92       	push	r14
     a8e:	bf 92       	push	r11
     a90:	af 92       	push	r10
     a92:	df 92       	push	r13
     a94:	cf 92       	push	r12
     a96:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     a9a:	c6 01       	movw	r24, r12
     a9c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		
		dtostrf( Zg, 3, 2, float_ );
     aa0:	22 e0       	ldi	r18, 0x02	; 2
     aa2:	43 e0       	ldi	r20, 0x03	; 3
     aa4:	6b a9       	ldd	r22, Y+51	; 0x33
     aa6:	7c a9       	ldd	r23, Y+52	; 0x34
     aa8:	8d a9       	ldd	r24, Y+53	; 0x35
     aaa:	9e a9       	ldd	r25, Y+54	; 0x36
     aac:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Gz
     ab0:	ff 92       	push	r15
     ab2:	ef 92       	push	r14
     ab4:	bf 92       	push	r11
     ab6:	af 92       	push	r10
     ab8:	df 92       	push	r13
     aba:	cf 92       	push	r12
     abc:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	c6 01       	movw	r24, r12
     acc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		USART_SendString("\n");
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		
		dtostrf(pitch, 3, 2, float_);
     ad8:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <pitch>
     adc:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <pitch+0x1>
     ae0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <pitch+0x2>
     ae4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <pitch+0x3>
     ae8:	22 e0       	ldi	r18, 0x02	; 2
     aea:	43 e0       	ldi	r20, 0x03	; 3
     aec:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Pitch
     af0:	ff 92       	push	r15
     af2:	ef 92       	push	r14
     af4:	bf 92       	push	r11
     af6:	af 92       	push	r10
     af8:	df 92       	push	r13
     afa:	cf 92       	push	r12
     afc:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     b00:	c6 01       	movw	r24, r12
     b02:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		
		dtostrf(roll, 3, 2, float_);
     b06:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <roll>
     b0a:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <roll+0x1>
     b0e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <roll+0x2>
     b12:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <roll+0x3>
     b16:	22 e0       	ldi	r18, 0x02	; 2
     b18:	43 e0       	ldi	r20, 0x03	; 3
     b1a:	0e 94 a4 09 	call	0x1348	; 0x1348 <dtostrf>
		sprintf(buffer,"%s,",float_);	//Roll
     b1e:	ff 92       	push	r15
     b20:	ef 92       	push	r14
     b22:	bf 92       	push	r11
     b24:	af 92       	push	r10
     b26:	df 92       	push	r13
     b28:	cf 92       	push	r12
     b2a:	0e 94 c4 09 	call	0x1388	; 0x1388 <sprintf>
		USART_SendString(buffer);
     b2e:	c6 01       	movw	r24, r12
     b30:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
		USART_SendString("\n\n");
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_SendString>
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	b1 ce       	rjmp	.-670    	; 0x8aa <main+0x2e>

00000b48 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     b48:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     b4c:	88 e4       	ldi	r24, 0x48	; 72
     b4e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     b52:	08 95       	ret

00000b54 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     b54:	94 ea       	ldi	r25, 0xA4	; 164
     b56:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     b5a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     b5e:	99 23       	and	r25, r25
     b60:	e4 f7       	brge	.-8      	; 0xb5a <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     b62:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     b66:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     b68:	90 31       	cpi	r25, 0x10	; 16
     b6a:	91 f4       	brne	.+36     	; 0xb90 <I2C_Repeated_Start+0x3c>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     b6c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     b70:	84 e8       	ldi	r24, 0x84	; 132
     b72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     b76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     b7a:	88 23       	and	r24, r24
     b7c:	e4 f7       	brge	.-8      	; 0xb76 <I2C_Repeated_Start+0x22>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     b7e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     b82:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     b84:	80 34       	cpi	r24, 0x40	; 64
     b86:	31 f0       	breq	.+12     	; 0xb94 <I2C_Repeated_Start+0x40>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     b88:	80 32       	cpi	r24, 0x20	; 32
     b8a:	31 f4       	brne	.+12     	; 0xb98 <I2C_Repeated_Start+0x44>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     b98:	83 e0       	ldi	r24, 0x03	; 3
}
     b9a:	08 95       	ret

00000b9c <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     b9c:	84 e9       	ldi	r24, 0x94	; 148
     b9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     ba2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ba6:	84 fd       	sbrc	r24, 4
     ba8:	fc cf       	rjmp	.-8      	; 0xba2 <I2C_Stop+0x6>
}
     baa:	08 95       	ret

00000bac <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     bac:	cf 93       	push	r28
     bae:	c8 2f       	mov	r28, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     bb0:	84 ea       	ldi	r24, 0xA4	; 164
     bb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     bb6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bba:	88 23       	and	r24, r24
     bbc:	e4 f7       	brge	.-8      	; 0xbb6 <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     bbe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     bc2:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     bc4:	88 30       	cpi	r24, 0x08	; 8
     bc6:	a1 f7       	brne	.-24     	; 0xbb0 <I2C_Start_Wait+0x4>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     bc8:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     bcc:	84 e8       	ldi	r24, 0x84	; 132
     bce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     bd2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bd6:	88 23       	and	r24, r24
     bd8:	e4 f7       	brge	.-8      	; 0xbd2 <I2C_Start_Wait+0x26>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     bda:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     bde:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     be0:	88 31       	cpi	r24, 0x18	; 24
     be2:	19 f0       	breq	.+6      	; 0xbea <I2C_Start_Wait+0x3e>
		{
			I2C_Stop();										/* If not then generate stop condition */
     be4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <I2C_Stop>
			continue;										/* continue with start loop again */
     be8:	e3 cf       	rjmp	.-58     	; 0xbb0 <I2C_Start_Wait+0x4>
		}
		break;												/* If yes then break loop */
	}
}
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     bee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     bf2:	84 e8       	ldi	r24, 0x84	; 132
     bf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     bf8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bfc:	88 23       	and	r24, r24
     bfe:	e4 f7       	brge	.-8      	; 0xbf8 <I2C_Write+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     c00:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c04:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     c06:	88 32       	cpi	r24, 0x28	; 40
     c08:	21 f0       	breq	.+8      	; 0xc12 <I2C_Write+0x24>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     c0a:	80 33       	cpi	r24, 0x30	; 48
     c0c:	21 f4       	brne	.+8      	; 0xc16 <I2C_Write+0x28>
	return 1;												/* If yes then return 1 to indicate nack received */
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     c16:	82 e0       	ldi	r24, 0x02	; 2
}
     c18:	08 95       	ret

00000c1a <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     c1a:	84 ec       	ldi	r24, 0xC4	; 196
     c1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     c20:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c24:	88 23       	and	r24, r24
     c26:	e4 f7       	brge	.-8      	; 0xc20 <I2C_Read_Ack+0x6>
	return TWDR;											/* Return received data */
     c28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}	
     c2c:	08 95       	ret

00000c2e <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     c2e:	84 e8       	ldi	r24, 0x84	; 132
     c30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     c34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c38:	88 23       	and	r24, r24
     c3a:	e4 f7       	brge	.-8      	; 0xc34 <I2C_Read_Nack+0x6>
	return TWDR;											/* Return received data */
     c3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     c40:	08 95       	ret

00000c42 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */ 
}
     c42:	e1 ec       	ldi	r30, 0xC1	; 193
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	20 81       	ld	r18, Z
     c48:	28 61       	ori	r18, 0x18	; 24
     c4a:	20 83       	st	Z, r18
     c4c:	e2 ec       	ldi	r30, 0xC2	; 194
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	20 81       	ld	r18, Z
     c52:	26 60       	ori	r18, 0x06	; 6
     c54:	20 83       	st	Z, r18
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	aa 1f       	adc	r26, r26
     c60:	bb 1f       	adc	r27, r27
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	aa 1f       	adc	r26, r26
     c68:	bb 1f       	adc	r27, r27
     c6a:	9c 01       	movw	r18, r24
     c6c:	ad 01       	movw	r20, r26
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	44 1f       	adc	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	44 1f       	adc	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	74 e2       	ldi	r23, 0x24	; 36
     c82:	84 ef       	ldi	r24, 0xF4	; 244
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 82 09 	call	0x1304	; 0x1304 <__udivmodsi4>
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	82 0f       	add	r24, r18
     c8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     c92:	da 01       	movw	r26, r20
     c94:	c9 01       	movw	r24, r18
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	a1 09       	sbc	r26, r1
     c9a:	b1 09       	sbc	r27, r1
     c9c:	89 2f       	mov	r24, r25
     c9e:	9a 2f       	mov	r25, r26
     ca0:	ab 2f       	mov	r26, r27
     ca2:	bb 27       	eor	r27, r27
     ca4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     ca8:	08 95       	ret

00000caa <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
     caa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
     cae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cb2:	85 ff       	sbrs	r24, 5
     cb4:	fc cf       	rjmp	.-8      	; 0xcae <USART_TxChar+0x4>
}
     cb6:	08 95       	ret

00000cb8 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	8c 01       	movw	r16, r24
	int i=0;																	
     cc2:	c0 e0       	ldi	r28, 0x00	; 0
     cc4:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     cc8:	0e 94 55 06 	call	0xcaa	; 0xcaa <USART_TxChar>
		i++;
     ccc:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     cce:	f8 01       	movw	r30, r16
     cd0:	ec 0f       	add	r30, r28
     cd2:	fd 1f       	adc	r31, r29
     cd4:	80 81       	ld	r24, Z
     cd6:	81 11       	cpse	r24, r1
     cd8:	f7 cf       	rjmp	.-18     	; 0xcc8 <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <__subsf3>:
     ce4:	50 58       	subi	r21, 0x80	; 128

00000ce6 <__addsf3>:
     ce6:	bb 27       	eor	r27, r27
     ce8:	aa 27       	eor	r26, r26
     cea:	0e 94 8a 06 	call	0xd14	; 0xd14 <__addsf3x>
     cee:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>
     cf2:	0e 94 66 08 	call	0x10cc	; 0x10cc <__fp_pscA>
     cf6:	38 f0       	brcs	.+14     	; 0xd06 <__addsf3+0x20>
     cf8:	0e 94 6d 08 	call	0x10da	; 0x10da <__fp_pscB>
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <__addsf3+0x20>
     cfe:	39 f4       	brne	.+14     	; 0xd0e <__addsf3+0x28>
     d00:	9f 3f       	cpi	r25, 0xFF	; 255
     d02:	19 f4       	brne	.+6      	; 0xd0a <__addsf3+0x24>
     d04:	26 f4       	brtc	.+8      	; 0xd0e <__addsf3+0x28>
     d06:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_nan>
     d0a:	0e f4       	brtc	.+2      	; 0xd0e <__addsf3+0x28>
     d0c:	e0 95       	com	r30
     d0e:	e7 fb       	bst	r30, 7
     d10:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_inf>

00000d14 <__addsf3x>:
     d14:	e9 2f       	mov	r30, r25
     d16:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_split3>
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__addsf3+0xc>
     d1c:	ba 17       	cp	r27, r26
     d1e:	62 07       	cpc	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	84 07       	cpc	r24, r20
     d24:	95 07       	cpc	r25, r21
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__addsf3x+0x1c>
     d28:	79 f4       	brne	.+30     	; 0xd48 <__addsf3x+0x34>
     d2a:	a6 f5       	brtc	.+104    	; 0xd94 <__addsf3x+0x80>
     d2c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_zero>
     d30:	0e f4       	brtc	.+2      	; 0xd34 <__addsf3x+0x20>
     d32:	e0 95       	com	r30
     d34:	0b 2e       	mov	r0, r27
     d36:	ba 2f       	mov	r27, r26
     d38:	a0 2d       	mov	r26, r0
     d3a:	0b 01       	movw	r0, r22
     d3c:	b9 01       	movw	r22, r18
     d3e:	90 01       	movw	r18, r0
     d40:	0c 01       	movw	r0, r24
     d42:	ca 01       	movw	r24, r20
     d44:	a0 01       	movw	r20, r0
     d46:	11 24       	eor	r1, r1
     d48:	ff 27       	eor	r31, r31
     d4a:	59 1b       	sub	r21, r25
     d4c:	99 f0       	breq	.+38     	; 0xd74 <__addsf3x+0x60>
     d4e:	59 3f       	cpi	r21, 0xF9	; 249
     d50:	50 f4       	brcc	.+20     	; 0xd66 <__addsf3x+0x52>
     d52:	50 3e       	cpi	r21, 0xE0	; 224
     d54:	68 f1       	brcs	.+90     	; 0xdb0 <__addsf3x+0x9c>
     d56:	1a 16       	cp	r1, r26
     d58:	f0 40       	sbci	r31, 0x00	; 0
     d5a:	a2 2f       	mov	r26, r18
     d5c:	23 2f       	mov	r18, r19
     d5e:	34 2f       	mov	r19, r20
     d60:	44 27       	eor	r20, r20
     d62:	58 5f       	subi	r21, 0xF8	; 248
     d64:	f3 cf       	rjmp	.-26     	; 0xd4c <__addsf3x+0x38>
     d66:	46 95       	lsr	r20
     d68:	37 95       	ror	r19
     d6a:	27 95       	ror	r18
     d6c:	a7 95       	ror	r26
     d6e:	f0 40       	sbci	r31, 0x00	; 0
     d70:	53 95       	inc	r21
     d72:	c9 f7       	brne	.-14     	; 0xd66 <__addsf3x+0x52>
     d74:	7e f4       	brtc	.+30     	; 0xd94 <__addsf3x+0x80>
     d76:	1f 16       	cp	r1, r31
     d78:	ba 0b       	sbc	r27, r26
     d7a:	62 0b       	sbc	r22, r18
     d7c:	73 0b       	sbc	r23, r19
     d7e:	84 0b       	sbc	r24, r20
     d80:	ba f0       	brmi	.+46     	; 0xdb0 <__addsf3x+0x9c>
     d82:	91 50       	subi	r25, 0x01	; 1
     d84:	a1 f0       	breq	.+40     	; 0xdae <__addsf3x+0x9a>
     d86:	ff 0f       	add	r31, r31
     d88:	bb 1f       	adc	r27, r27
     d8a:	66 1f       	adc	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	c2 f7       	brpl	.-16     	; 0xd82 <__addsf3x+0x6e>
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <__addsf3x+0x9c>
     d94:	ba 0f       	add	r27, r26
     d96:	62 1f       	adc	r22, r18
     d98:	73 1f       	adc	r23, r19
     d9a:	84 1f       	adc	r24, r20
     d9c:	48 f4       	brcc	.+18     	; 0xdb0 <__addsf3x+0x9c>
     d9e:	87 95       	ror	r24
     da0:	77 95       	ror	r23
     da2:	67 95       	ror	r22
     da4:	b7 95       	ror	r27
     da6:	f7 95       	ror	r31
     da8:	9e 3f       	cpi	r25, 0xFE	; 254
     daa:	08 f0       	brcs	.+2      	; 0xdae <__addsf3x+0x9a>
     dac:	b0 cf       	rjmp	.-160    	; 0xd0e <__addsf3+0x28>
     dae:	93 95       	inc	r25
     db0:	88 0f       	add	r24, r24
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <__addsf3x+0xa2>
     db4:	99 27       	eor	r25, r25
     db6:	ee 0f       	add	r30, r30
     db8:	97 95       	ror	r25
     dba:	87 95       	ror	r24
     dbc:	08 95       	ret
     dbe:	0e 94 66 08 	call	0x10cc	; 0x10cc <__fp_pscA>
     dc2:	60 f0       	brcs	.+24     	; 0xddc <__addsf3x+0xc8>
     dc4:	80 e8       	ldi	r24, 0x80	; 128
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <__addsf3x+0xb8>
     dca:	9e ef       	ldi	r25, 0xFE	; 254
     dcc:	0e 94 6d 08 	call	0x10da	; 0x10da <__fp_pscB>
     dd0:	28 f0       	brcs	.+10     	; 0xddc <__addsf3x+0xc8>
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	51 e0       	ldi	r21, 0x01	; 1
     dd6:	71 f4       	brne	.+28     	; 0xdf4 <atan2+0x10>
     dd8:	5e ef       	ldi	r21, 0xFE	; 254
     dda:	0c c0       	rjmp	.+24     	; 0xdf4 <atan2+0x10>
     ddc:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_nan>
     de0:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_zero>

00000de4 <atan2>:
     de4:	e9 2f       	mov	r30, r25
     de6:	e0 78       	andi	r30, 0x80	; 128
     de8:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_split3>
     dec:	40 f3       	brcs	.-48     	; 0xdbe <__addsf3x+0xaa>
     dee:	09 2e       	mov	r0, r25
     df0:	05 2a       	or	r0, r21
     df2:	b1 f3       	breq	.-20     	; 0xde0 <__addsf3x+0xcc>
     df4:	26 17       	cp	r18, r22
     df6:	37 07       	cpc	r19, r23
     df8:	48 07       	cpc	r20, r24
     dfa:	59 07       	cpc	r21, r25
     dfc:	38 f0       	brcs	.+14     	; 0xe0c <atan2+0x28>
     dfe:	0e 2e       	mov	r0, r30
     e00:	07 f8       	bld	r0, 7
     e02:	e0 25       	eor	r30, r0
     e04:	69 f0       	breq	.+26     	; 0xe20 <atan2+0x3c>
     e06:	e0 25       	eor	r30, r0
     e08:	e0 64       	ori	r30, 0x40	; 64
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <atan2+0x3c>
     e0c:	ef 63       	ori	r30, 0x3F	; 63
     e0e:	07 f8       	bld	r0, 7
     e10:	00 94       	com	r0
     e12:	07 fa       	bst	r0, 7
     e14:	db 01       	movw	r26, r22
     e16:	b9 01       	movw	r22, r18
     e18:	9d 01       	movw	r18, r26
     e1a:	dc 01       	movw	r26, r24
     e1c:	ca 01       	movw	r24, r20
     e1e:	ad 01       	movw	r20, r26
     e20:	ef 93       	push	r30
     e22:	0e 94 68 07 	call	0xed0	; 0xed0 <__divsf3_pse>
     e26:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_round>
     e2a:	0e 94 22 07 	call	0xe44	; 0xe44 <atan>
     e2e:	5f 91       	pop	r21
     e30:	55 23       	and	r21, r21
     e32:	39 f0       	breq	.+14     	; 0xe42 <atan2+0x5e>
     e34:	2b ed       	ldi	r18, 0xDB	; 219
     e36:	3f e0       	ldi	r19, 0x0F	; 15
     e38:	49 e4       	ldi	r20, 0x49	; 73
     e3a:	50 fd       	sbrc	r21, 0
     e3c:	49 ec       	ldi	r20, 0xC9	; 201
     e3e:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__addsf3>
     e42:	08 95       	ret

00000e44 <atan>:
     e44:	df 93       	push	r29
     e46:	dd 27       	eor	r29, r29
     e48:	b9 2f       	mov	r27, r25
     e4a:	bf 77       	andi	r27, 0x7F	; 127
     e4c:	40 e8       	ldi	r20, 0x80	; 128
     e4e:	5f e3       	ldi	r21, 0x3F	; 63
     e50:	16 16       	cp	r1, r22
     e52:	17 06       	cpc	r1, r23
     e54:	48 07       	cpc	r20, r24
     e56:	5b 07       	cpc	r21, r27
     e58:	18 f4       	brcc	.+6      	; 0xe60 <atan+0x1c>
     e5a:	d9 2f       	mov	r29, r25
     e5c:	0e 94 ae 08 	call	0x115c	; 0x115c <inverse>
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	7f 93       	push	r23
     e66:	6f 93       	push	r22
     e68:	0e 94 69 09 	call	0x12d2	; 0x12d2 <square>
     e6c:	e8 e6       	ldi	r30, 0x68	; 104
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_powser>
     e74:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_round>
     e78:	2f 91       	pop	r18
     e7a:	3f 91       	pop	r19
     e7c:	4f 91       	pop	r20
     e7e:	5f 91       	pop	r21
     e80:	0e 94 c9 08 	call	0x1192	; 0x1192 <__mulsf3x>
     e84:	dd 23       	and	r29, r29
     e86:	51 f0       	breq	.+20     	; 0xe9c <atan+0x58>
     e88:	90 58       	subi	r25, 0x80	; 128
     e8a:	a2 ea       	ldi	r26, 0xA2	; 162
     e8c:	2a ed       	ldi	r18, 0xDA	; 218
     e8e:	3f e0       	ldi	r19, 0x0F	; 15
     e90:	49 ec       	ldi	r20, 0xC9	; 201
     e92:	5f e3       	ldi	r21, 0x3F	; 63
     e94:	d0 78       	andi	r29, 0x80	; 128
     e96:	5d 27       	eor	r21, r29
     e98:	0e 94 8a 06 	call	0xd14	; 0xd14 <__addsf3x>
     e9c:	df 91       	pop	r29
     e9e:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>

00000ea2 <__divsf3>:
     ea2:	0e 94 65 07 	call	0xeca	; 0xeca <__divsf3x>
     ea6:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>
     eaa:	0e 94 6d 08 	call	0x10da	; 0x10da <__fp_pscB>
     eae:	58 f0       	brcs	.+22     	; 0xec6 <__divsf3+0x24>
     eb0:	0e 94 66 08 	call	0x10cc	; 0x10cc <__fp_pscA>
     eb4:	40 f0       	brcs	.+16     	; 0xec6 <__divsf3+0x24>
     eb6:	29 f4       	brne	.+10     	; 0xec2 <__divsf3+0x20>
     eb8:	5f 3f       	cpi	r21, 0xFF	; 255
     eba:	29 f0       	breq	.+10     	; 0xec6 <__divsf3+0x24>
     ebc:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_inf>
     ec0:	51 11       	cpse	r21, r1
     ec2:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_szero>
     ec6:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_nan>

00000eca <__divsf3x>:
     eca:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_split3>
     ece:	68 f3       	brcs	.-38     	; 0xeaa <__divsf3+0x8>

00000ed0 <__divsf3_pse>:
     ed0:	99 23       	and	r25, r25
     ed2:	b1 f3       	breq	.-20     	; 0xec0 <__divsf3+0x1e>
     ed4:	55 23       	and	r21, r21
     ed6:	91 f3       	breq	.-28     	; 0xebc <__divsf3+0x1a>
     ed8:	95 1b       	sub	r25, r21
     eda:	55 0b       	sbc	r21, r21
     edc:	bb 27       	eor	r27, r27
     ede:	aa 27       	eor	r26, r26
     ee0:	62 17       	cp	r22, r18
     ee2:	73 07       	cpc	r23, r19
     ee4:	84 07       	cpc	r24, r20
     ee6:	38 f0       	brcs	.+14     	; 0xef6 <__divsf3_pse+0x26>
     ee8:	9f 5f       	subi	r25, 0xFF	; 255
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	22 0f       	add	r18, r18
     eee:	33 1f       	adc	r19, r19
     ef0:	44 1f       	adc	r20, r20
     ef2:	aa 1f       	adc	r26, r26
     ef4:	a9 f3       	breq	.-22     	; 0xee0 <__divsf3_pse+0x10>
     ef6:	35 d0       	rcall	.+106    	; 0xf62 <__divsf3_pse+0x92>
     ef8:	0e 2e       	mov	r0, r30
     efa:	3a f0       	brmi	.+14     	; 0xf0a <__divsf3_pse+0x3a>
     efc:	e0 e8       	ldi	r30, 0x80	; 128
     efe:	32 d0       	rcall	.+100    	; 0xf64 <__divsf3_pse+0x94>
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	50 40       	sbci	r21, 0x00	; 0
     f04:	e6 95       	lsr	r30
     f06:	00 1c       	adc	r0, r0
     f08:	ca f7       	brpl	.-14     	; 0xefc <__divsf3_pse+0x2c>
     f0a:	2b d0       	rcall	.+86     	; 0xf62 <__divsf3_pse+0x92>
     f0c:	fe 2f       	mov	r31, r30
     f0e:	29 d0       	rcall	.+82     	; 0xf62 <__divsf3_pse+0x92>
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	bb 1f       	adc	r27, r27
     f18:	26 17       	cp	r18, r22
     f1a:	37 07       	cpc	r19, r23
     f1c:	48 07       	cpc	r20, r24
     f1e:	ab 07       	cpc	r26, r27
     f20:	b0 e8       	ldi	r27, 0x80	; 128
     f22:	09 f0       	breq	.+2      	; 0xf26 <__divsf3_pse+0x56>
     f24:	bb 0b       	sbc	r27, r27
     f26:	80 2d       	mov	r24, r0
     f28:	bf 01       	movw	r22, r30
     f2a:	ff 27       	eor	r31, r31
     f2c:	93 58       	subi	r25, 0x83	; 131
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	3a f0       	brmi	.+14     	; 0xf40 <__divsf3_pse+0x70>
     f32:	9e 3f       	cpi	r25, 0xFE	; 254
     f34:	51 05       	cpc	r21, r1
     f36:	78 f0       	brcs	.+30     	; 0xf56 <__divsf3_pse+0x86>
     f38:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_inf>
     f3c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_szero>
     f40:	5f 3f       	cpi	r21, 0xFF	; 255
     f42:	e4 f3       	brlt	.-8      	; 0xf3c <__divsf3_pse+0x6c>
     f44:	98 3e       	cpi	r25, 0xE8	; 232
     f46:	d4 f3       	brlt	.-12     	; 0xf3c <__divsf3_pse+0x6c>
     f48:	86 95       	lsr	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b7 95       	ror	r27
     f50:	f7 95       	ror	r31
     f52:	9f 5f       	subi	r25, 0xFF	; 255
     f54:	c9 f7       	brne	.-14     	; 0xf48 <__divsf3_pse+0x78>
     f56:	88 0f       	add	r24, r24
     f58:	91 1d       	adc	r25, r1
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	97 f9       	bld	r25, 7
     f60:	08 95       	ret
     f62:	e1 e0       	ldi	r30, 0x01	; 1
     f64:	66 0f       	add	r22, r22
     f66:	77 1f       	adc	r23, r23
     f68:	88 1f       	adc	r24, r24
     f6a:	bb 1f       	adc	r27, r27
     f6c:	62 17       	cp	r22, r18
     f6e:	73 07       	cpc	r23, r19
     f70:	84 07       	cpc	r24, r20
     f72:	ba 07       	cpc	r27, r26
     f74:	20 f0       	brcs	.+8      	; 0xf7e <__divsf3_pse+0xae>
     f76:	62 1b       	sub	r22, r18
     f78:	73 0b       	sbc	r23, r19
     f7a:	84 0b       	sbc	r24, r20
     f7c:	ba 0b       	sbc	r27, r26
     f7e:	ee 1f       	adc	r30, r30
     f80:	88 f7       	brcc	.-30     	; 0xf64 <__divsf3_pse+0x94>
     f82:	e0 95       	com	r30
     f84:	08 95       	ret

00000f86 <__fixsfsi>:
     f86:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     f8a:	68 94       	set
     f8c:	b1 11       	cpse	r27, r1
     f8e:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_szero>
     f92:	08 95       	ret

00000f94 <__fixunssfsi>:
     f94:	0e 94 8d 08 	call	0x111a	; 0x111a <__fp_splitA>
     f98:	88 f0       	brcs	.+34     	; 0xfbc <__fixunssfsi+0x28>
     f9a:	9f 57       	subi	r25, 0x7F	; 127
     f9c:	98 f0       	brcs	.+38     	; 0xfc4 <__fixunssfsi+0x30>
     f9e:	b9 2f       	mov	r27, r25
     fa0:	99 27       	eor	r25, r25
     fa2:	b7 51       	subi	r27, 0x17	; 23
     fa4:	b0 f0       	brcs	.+44     	; 0xfd2 <__fixunssfsi+0x3e>
     fa6:	e1 f0       	breq	.+56     	; 0xfe0 <__fixunssfsi+0x4c>
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	1a f0       	brmi	.+6      	; 0xfb8 <__fixunssfsi+0x24>
     fb2:	ba 95       	dec	r27
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__fixunssfsi+0x14>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <__fixunssfsi+0x4c>
     fb8:	b1 30       	cpi	r27, 0x01	; 1
     fba:	91 f0       	breq	.+36     	; 0xfe0 <__fixunssfsi+0x4c>
     fbc:	0e 94 a7 08 	call	0x114e	; 0x114e <__fp_zero>
     fc0:	b1 e0       	ldi	r27, 0x01	; 1
     fc2:	08 95       	ret
     fc4:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_zero>
     fc8:	67 2f       	mov	r22, r23
     fca:	78 2f       	mov	r23, r24
     fcc:	88 27       	eor	r24, r24
     fce:	b8 5f       	subi	r27, 0xF8	; 248
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <__fixunssfsi+0x4c>
     fd2:	b9 3f       	cpi	r27, 0xF9	; 249
     fd4:	cc f3       	brlt	.-14     	; 0xfc8 <__fixunssfsi+0x34>
     fd6:	86 95       	lsr	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	b3 95       	inc	r27
     fde:	d9 f7       	brne	.-10     	; 0xfd6 <__fixunssfsi+0x42>
     fe0:	3e f4       	brtc	.+14     	; 0xff0 <__fixunssfsi+0x5c>
     fe2:	90 95       	com	r25
     fe4:	80 95       	com	r24
     fe6:	70 95       	com	r23
     fe8:	61 95       	neg	r22
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__floatunsisf>:
     ff2:	e8 94       	clt
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <__floatsisf+0x12>

00000ff6 <__floatsisf>:
     ff6:	97 fb       	bst	r25, 7
     ff8:	3e f4       	brtc	.+14     	; 0x1008 <__floatsisf+0x12>
     ffa:	90 95       	com	r25
     ffc:	80 95       	com	r24
     ffe:	70 95       	com	r23
    1000:	61 95       	neg	r22
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	99 23       	and	r25, r25
    100a:	a9 f0       	breq	.+42     	; 0x1036 <__floatsisf+0x40>
    100c:	f9 2f       	mov	r31, r25
    100e:	96 e9       	ldi	r25, 0x96	; 150
    1010:	bb 27       	eor	r27, r27
    1012:	93 95       	inc	r25
    1014:	f6 95       	lsr	r31
    1016:	87 95       	ror	r24
    1018:	77 95       	ror	r23
    101a:	67 95       	ror	r22
    101c:	b7 95       	ror	r27
    101e:	f1 11       	cpse	r31, r1
    1020:	f8 cf       	rjmp	.-16     	; 0x1012 <__floatsisf+0x1c>
    1022:	fa f4       	brpl	.+62     	; 0x1062 <__floatsisf+0x6c>
    1024:	bb 0f       	add	r27, r27
    1026:	11 f4       	brne	.+4      	; 0x102c <__floatsisf+0x36>
    1028:	60 ff       	sbrs	r22, 0
    102a:	1b c0       	rjmp	.+54     	; 0x1062 <__floatsisf+0x6c>
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	16 c0       	rjmp	.+44     	; 0x1062 <__floatsisf+0x6c>
    1036:	88 23       	and	r24, r24
    1038:	11 f0       	breq	.+4      	; 0x103e <__floatsisf+0x48>
    103a:	96 e9       	ldi	r25, 0x96	; 150
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <__floatsisf+0x6a>
    103e:	77 23       	and	r23, r23
    1040:	21 f0       	breq	.+8      	; 0x104a <__floatsisf+0x54>
    1042:	9e e8       	ldi	r25, 0x8E	; 142
    1044:	87 2f       	mov	r24, r23
    1046:	76 2f       	mov	r23, r22
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <__floatsisf+0x5e>
    104a:	66 23       	and	r22, r22
    104c:	71 f0       	breq	.+28     	; 0x106a <__floatsisf+0x74>
    104e:	96 e8       	ldi	r25, 0x86	; 134
    1050:	86 2f       	mov	r24, r22
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	2a f0       	brmi	.+10     	; 0x1062 <__floatsisf+0x6c>
    1058:	9a 95       	dec	r25
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	da f7       	brpl	.-10     	; 0x1058 <__floatsisf+0x62>
    1062:	88 0f       	add	r24, r24
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
    1068:	97 f9       	bld	r25, 7
    106a:	08 95       	ret

0000106c <__fp_inf>:
    106c:	97 f9       	bld	r25, 7
    106e:	9f 67       	ori	r25, 0x7F	; 127
    1070:	80 e8       	ldi	r24, 0x80	; 128
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	08 95       	ret

00001078 <__fp_nan>:
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	80 ec       	ldi	r24, 0xC0	; 192
    107c:	08 95       	ret

0000107e <__fp_powser>:
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	1f 93       	push	r17
    1084:	0f 93       	push	r16
    1086:	ff 92       	push	r15
    1088:	ef 92       	push	r14
    108a:	df 92       	push	r13
    108c:	7b 01       	movw	r14, r22
    108e:	8c 01       	movw	r16, r24
    1090:	68 94       	set
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <__fp_powser+0x22>
    1094:	da 2e       	mov	r13, r26
    1096:	ef 01       	movw	r28, r30
    1098:	0e 94 c9 08 	call	0x1192	; 0x1192 <__mulsf3x>
    109c:	fe 01       	movw	r30, r28
    109e:	e8 94       	clt
    10a0:	a5 91       	lpm	r26, Z+
    10a2:	25 91       	lpm	r18, Z+
    10a4:	35 91       	lpm	r19, Z+
    10a6:	45 91       	lpm	r20, Z+
    10a8:	55 91       	lpm	r21, Z+
    10aa:	a6 f3       	brts	.-24     	; 0x1094 <__fp_powser+0x16>
    10ac:	ef 01       	movw	r28, r30
    10ae:	0e 94 8a 06 	call	0xd14	; 0xd14 <__addsf3x>
    10b2:	fe 01       	movw	r30, r28
    10b4:	97 01       	movw	r18, r14
    10b6:	a8 01       	movw	r20, r16
    10b8:	da 94       	dec	r13
    10ba:	69 f7       	brne	.-38     	; 0x1096 <__fp_powser+0x18>
    10bc:	df 90       	pop	r13
    10be:	ef 90       	pop	r14
    10c0:	ff 90       	pop	r15
    10c2:	0f 91       	pop	r16
    10c4:	1f 91       	pop	r17
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <__fp_pscA>:
    10cc:	00 24       	eor	r0, r0
    10ce:	0a 94       	dec	r0
    10d0:	16 16       	cp	r1, r22
    10d2:	17 06       	cpc	r1, r23
    10d4:	18 06       	cpc	r1, r24
    10d6:	09 06       	cpc	r0, r25
    10d8:	08 95       	ret

000010da <__fp_pscB>:
    10da:	00 24       	eor	r0, r0
    10dc:	0a 94       	dec	r0
    10de:	12 16       	cp	r1, r18
    10e0:	13 06       	cpc	r1, r19
    10e2:	14 06       	cpc	r1, r20
    10e4:	05 06       	cpc	r0, r21
    10e6:	08 95       	ret

000010e8 <__fp_round>:
    10e8:	09 2e       	mov	r0, r25
    10ea:	03 94       	inc	r0
    10ec:	00 0c       	add	r0, r0
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__fp_round+0xc>
    10f0:	88 23       	and	r24, r24
    10f2:	52 f0       	brmi	.+20     	; 0x1108 <__fp_round+0x20>
    10f4:	bb 0f       	add	r27, r27
    10f6:	40 f4       	brcc	.+16     	; 0x1108 <__fp_round+0x20>
    10f8:	bf 2b       	or	r27, r31
    10fa:	11 f4       	brne	.+4      	; 0x1100 <__fp_round+0x18>
    10fc:	60 ff       	sbrs	r22, 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <__fp_round+0x20>
    1100:	6f 5f       	subi	r22, 0xFF	; 255
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	8f 4f       	sbci	r24, 0xFF	; 255
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	08 95       	ret

0000110a <__fp_split3>:
    110a:	57 fd       	sbrc	r21, 7
    110c:	90 58       	subi	r25, 0x80	; 128
    110e:	44 0f       	add	r20, r20
    1110:	55 1f       	adc	r21, r21
    1112:	59 f0       	breq	.+22     	; 0x112a <__fp_splitA+0x10>
    1114:	5f 3f       	cpi	r21, 0xFF	; 255
    1116:	71 f0       	breq	.+28     	; 0x1134 <__fp_splitA+0x1a>
    1118:	47 95       	ror	r20

0000111a <__fp_splitA>:
    111a:	88 0f       	add	r24, r24
    111c:	97 fb       	bst	r25, 7
    111e:	99 1f       	adc	r25, r25
    1120:	61 f0       	breq	.+24     	; 0x113a <__fp_splitA+0x20>
    1122:	9f 3f       	cpi	r25, 0xFF	; 255
    1124:	79 f0       	breq	.+30     	; 0x1144 <__fp_splitA+0x2a>
    1126:	87 95       	ror	r24
    1128:	08 95       	ret
    112a:	12 16       	cp	r1, r18
    112c:	13 06       	cpc	r1, r19
    112e:	14 06       	cpc	r1, r20
    1130:	55 1f       	adc	r21, r21
    1132:	f2 cf       	rjmp	.-28     	; 0x1118 <__fp_split3+0xe>
    1134:	46 95       	lsr	r20
    1136:	f1 df       	rcall	.-30     	; 0x111a <__fp_splitA>
    1138:	08 c0       	rjmp	.+16     	; 0x114a <__fp_splitA+0x30>
    113a:	16 16       	cp	r1, r22
    113c:	17 06       	cpc	r1, r23
    113e:	18 06       	cpc	r1, r24
    1140:	99 1f       	adc	r25, r25
    1142:	f1 cf       	rjmp	.-30     	; 0x1126 <__fp_splitA+0xc>
    1144:	86 95       	lsr	r24
    1146:	71 05       	cpc	r23, r1
    1148:	61 05       	cpc	r22, r1
    114a:	08 94       	sec
    114c:	08 95       	ret

0000114e <__fp_zero>:
    114e:	e8 94       	clt

00001150 <__fp_szero>:
    1150:	bb 27       	eor	r27, r27
    1152:	66 27       	eor	r22, r22
    1154:	77 27       	eor	r23, r23
    1156:	cb 01       	movw	r24, r22
    1158:	97 f9       	bld	r25, 7
    115a:	08 95       	ret

0000115c <inverse>:
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 e8       	ldi	r24, 0x80	; 128
    1166:	9f e3       	ldi	r25, 0x3F	; 63
    1168:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__divsf3>

0000116c <__mulsf3>:
    116c:	0e 94 c9 08 	call	0x1192	; 0x1192 <__mulsf3x>
    1170:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>
    1174:	0e 94 66 08 	call	0x10cc	; 0x10cc <__fp_pscA>
    1178:	38 f0       	brcs	.+14     	; 0x1188 <__mulsf3+0x1c>
    117a:	0e 94 6d 08 	call	0x10da	; 0x10da <__fp_pscB>
    117e:	20 f0       	brcs	.+8      	; 0x1188 <__mulsf3+0x1c>
    1180:	95 23       	and	r25, r21
    1182:	11 f0       	breq	.+4      	; 0x1188 <__mulsf3+0x1c>
    1184:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_inf>
    1188:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_nan>
    118c:	11 24       	eor	r1, r1
    118e:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_szero>

00001192 <__mulsf3x>:
    1192:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_split3>
    1196:	70 f3       	brcs	.-36     	; 0x1174 <__mulsf3+0x8>

00001198 <__mulsf3_pse>:
    1198:	95 9f       	mul	r25, r21
    119a:	c1 f3       	breq	.-16     	; 0x118c <__mulsf3+0x20>
    119c:	95 0f       	add	r25, r21
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	55 1f       	adc	r21, r21
    11a2:	62 9f       	mul	r22, r18
    11a4:	f0 01       	movw	r30, r0
    11a6:	72 9f       	mul	r23, r18
    11a8:	bb 27       	eor	r27, r27
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	63 9f       	mul	r22, r19
    11b0:	aa 27       	eor	r26, r26
    11b2:	f0 0d       	add	r31, r0
    11b4:	b1 1d       	adc	r27, r1
    11b6:	aa 1f       	adc	r26, r26
    11b8:	64 9f       	mul	r22, r20
    11ba:	66 27       	eor	r22, r22
    11bc:	b0 0d       	add	r27, r0
    11be:	a1 1d       	adc	r26, r1
    11c0:	66 1f       	adc	r22, r22
    11c2:	82 9f       	mul	r24, r18
    11c4:	22 27       	eor	r18, r18
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	73 9f       	mul	r23, r19
    11ce:	b0 0d       	add	r27, r0
    11d0:	a1 1d       	adc	r26, r1
    11d2:	62 1f       	adc	r22, r18
    11d4:	83 9f       	mul	r24, r19
    11d6:	a0 0d       	add	r26, r0
    11d8:	61 1d       	adc	r22, r1
    11da:	22 1f       	adc	r18, r18
    11dc:	74 9f       	mul	r23, r20
    11de:	33 27       	eor	r19, r19
    11e0:	a0 0d       	add	r26, r0
    11e2:	61 1d       	adc	r22, r1
    11e4:	23 1f       	adc	r18, r19
    11e6:	84 9f       	mul	r24, r20
    11e8:	60 0d       	add	r22, r0
    11ea:	21 1d       	adc	r18, r1
    11ec:	82 2f       	mov	r24, r18
    11ee:	76 2f       	mov	r23, r22
    11f0:	6a 2f       	mov	r22, r26
    11f2:	11 24       	eor	r1, r1
    11f4:	9f 57       	subi	r25, 0x7F	; 127
    11f6:	50 40       	sbci	r21, 0x00	; 0
    11f8:	9a f0       	brmi	.+38     	; 0x1220 <__mulsf3_pse+0x88>
    11fa:	f1 f0       	breq	.+60     	; 0x1238 <__mulsf3_pse+0xa0>
    11fc:	88 23       	and	r24, r24
    11fe:	4a f0       	brmi	.+18     	; 0x1212 <__mulsf3_pse+0x7a>
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	bb 1f       	adc	r27, r27
    1206:	66 1f       	adc	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	a9 f7       	brne	.-22     	; 0x11fc <__mulsf3_pse+0x64>
    1212:	9e 3f       	cpi	r25, 0xFE	; 254
    1214:	51 05       	cpc	r21, r1
    1216:	80 f0       	brcs	.+32     	; 0x1238 <__mulsf3_pse+0xa0>
    1218:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_inf>
    121c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_szero>
    1220:	5f 3f       	cpi	r21, 0xFF	; 255
    1222:	e4 f3       	brlt	.-8      	; 0x121c <__mulsf3_pse+0x84>
    1224:	98 3e       	cpi	r25, 0xE8	; 232
    1226:	d4 f3       	brlt	.-12     	; 0x121c <__mulsf3_pse+0x84>
    1228:	86 95       	lsr	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	f7 95       	ror	r31
    1232:	e7 95       	ror	r30
    1234:	9f 5f       	subi	r25, 0xFF	; 255
    1236:	c1 f7       	brne	.-16     	; 0x1228 <__mulsf3_pse+0x90>
    1238:	fe 2b       	or	r31, r30
    123a:	88 0f       	add	r24, r24
    123c:	91 1d       	adc	r25, r1
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret
    1246:	19 f4       	brne	.+6      	; 0x124e <__mulsf3_pse+0xb6>
    1248:	16 f4       	brtc	.+4      	; 0x124e <__mulsf3_pse+0xb6>
    124a:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_nan>
    124e:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__fp_mpack>

00001252 <sqrt>:
    1252:	0e 94 8d 08 	call	0x111a	; 0x111a <__fp_splitA>
    1256:	b8 f3       	brcs	.-18     	; 0x1246 <__mulsf3_pse+0xae>
    1258:	99 23       	and	r25, r25
    125a:	c9 f3       	breq	.-14     	; 0x124e <__mulsf3_pse+0xb6>
    125c:	b6 f3       	brts	.-20     	; 0x124a <__mulsf3_pse+0xb2>
    125e:	9f 57       	subi	r25, 0x7F	; 127
    1260:	55 0b       	sbc	r21, r21
    1262:	87 ff       	sbrs	r24, 7
    1264:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__fp_norm2>
    1268:	00 24       	eor	r0, r0
    126a:	a0 e6       	ldi	r26, 0x60	; 96
    126c:	40 ea       	ldi	r20, 0xA0	; 160
    126e:	90 01       	movw	r18, r0
    1270:	80 58       	subi	r24, 0x80	; 128
    1272:	56 95       	lsr	r21
    1274:	97 95       	ror	r25
    1276:	28 f4       	brcc	.+10     	; 0x1282 <sqrt+0x30>
    1278:	80 5c       	subi	r24, 0xC0	; 192
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	20 f0       	brcs	.+8      	; 0x128a <sqrt+0x38>
    1282:	26 17       	cp	r18, r22
    1284:	37 07       	cpc	r19, r23
    1286:	48 07       	cpc	r20, r24
    1288:	30 f4       	brcc	.+12     	; 0x1296 <sqrt+0x44>
    128a:	62 1b       	sub	r22, r18
    128c:	73 0b       	sbc	r23, r19
    128e:	84 0b       	sbc	r24, r20
    1290:	20 29       	or	r18, r0
    1292:	31 29       	or	r19, r1
    1294:	4a 2b       	or	r20, r26
    1296:	a6 95       	lsr	r26
    1298:	17 94       	ror	r1
    129a:	07 94       	ror	r0
    129c:	20 25       	eor	r18, r0
    129e:	31 25       	eor	r19, r1
    12a0:	4a 27       	eor	r20, r26
    12a2:	58 f7       	brcc	.-42     	; 0x127a <sqrt+0x28>
    12a4:	66 0f       	add	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	20 f0       	brcs	.+8      	; 0x12b4 <sqrt+0x62>
    12ac:	26 17       	cp	r18, r22
    12ae:	37 07       	cpc	r19, r23
    12b0:	48 07       	cpc	r20, r24
    12b2:	30 f4       	brcc	.+12     	; 0x12c0 <sqrt+0x6e>
    12b4:	62 0b       	sbc	r22, r18
    12b6:	73 0b       	sbc	r23, r19
    12b8:	84 0b       	sbc	r24, r20
    12ba:	20 0d       	add	r18, r0
    12bc:	31 1d       	adc	r19, r1
    12be:	41 1d       	adc	r20, r1
    12c0:	a0 95       	com	r26
    12c2:	81 f7       	brne	.-32     	; 0x12a4 <sqrt+0x52>
    12c4:	b9 01       	movw	r22, r18
    12c6:	84 2f       	mov	r24, r20
    12c8:	91 58       	subi	r25, 0x81	; 129
    12ca:	88 0f       	add	r24, r24
    12cc:	96 95       	lsr	r25
    12ce:	87 95       	ror	r24
    12d0:	08 95       	ret

000012d2 <square>:
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__mulsf3>

000012da <__fp_mpack>:
    12da:	9f 3f       	cpi	r25, 0xFF	; 255
    12dc:	31 f0       	breq	.+12     	; 0x12ea <__fp_mpack_finite+0xc>

000012de <__fp_mpack_finite>:
    12de:	91 50       	subi	r25, 0x01	; 1
    12e0:	20 f4       	brcc	.+8      	; 0x12ea <__fp_mpack_finite+0xc>
    12e2:	87 95       	ror	r24
    12e4:	77 95       	ror	r23
    12e6:	67 95       	ror	r22
    12e8:	b7 95       	ror	r27
    12ea:	88 0f       	add	r24, r24
    12ec:	91 1d       	adc	r25, r1
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	97 f9       	bld	r25, 7
    12f4:	08 95       	ret

000012f6 <__fp_norm2>:
    12f6:	91 50       	subi	r25, 0x01	; 1
    12f8:	50 40       	sbci	r21, 0x00	; 0
    12fa:	66 0f       	add	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	d2 f7       	brpl	.-12     	; 0x12f6 <__fp_norm2>
    1302:	08 95       	ret

00001304 <__udivmodsi4>:
    1304:	a1 e2       	ldi	r26, 0x21	; 33
    1306:	1a 2e       	mov	r1, r26
    1308:	aa 1b       	sub	r26, r26
    130a:	bb 1b       	sub	r27, r27
    130c:	fd 01       	movw	r30, r26
    130e:	0d c0       	rjmp	.+26     	; 0x132a <__udivmodsi4_ep>

00001310 <__udivmodsi4_loop>:
    1310:	aa 1f       	adc	r26, r26
    1312:	bb 1f       	adc	r27, r27
    1314:	ee 1f       	adc	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	a2 17       	cp	r26, r18
    131a:	b3 07       	cpc	r27, r19
    131c:	e4 07       	cpc	r30, r20
    131e:	f5 07       	cpc	r31, r21
    1320:	20 f0       	brcs	.+8      	; 0x132a <__udivmodsi4_ep>
    1322:	a2 1b       	sub	r26, r18
    1324:	b3 0b       	sbc	r27, r19
    1326:	e4 0b       	sbc	r30, r20
    1328:	f5 0b       	sbc	r31, r21

0000132a <__udivmodsi4_ep>:
    132a:	66 1f       	adc	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	88 1f       	adc	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	1a 94       	dec	r1
    1334:	69 f7       	brne	.-38     	; 0x1310 <__udivmodsi4_loop>
    1336:	60 95       	com	r22
    1338:	70 95       	com	r23
    133a:	80 95       	com	r24
    133c:	90 95       	com	r25
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	bd 01       	movw	r22, r26
    1344:	cf 01       	movw	r24, r30
    1346:	08 95       	ret

00001348 <dtostrf>:
    1348:	ef 92       	push	r14
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	e8 01       	movw	r28, r16
    1354:	47 fd       	sbrc	r20, 7
    1356:	02 c0       	rjmp	.+4      	; 0x135c <dtostrf+0x14>
    1358:	34 e0       	ldi	r19, 0x04	; 4
    135a:	01 c0       	rjmp	.+2      	; 0x135e <dtostrf+0x16>
    135c:	34 e1       	ldi	r19, 0x14	; 20
    135e:	04 2e       	mov	r0, r20
    1360:	00 0c       	add	r0, r0
    1362:	55 0b       	sbc	r21, r21
    1364:	57 ff       	sbrs	r21, 7
    1366:	03 c0       	rjmp	.+6      	; 0x136e <dtostrf+0x26>
    1368:	51 95       	neg	r21
    136a:	41 95       	neg	r20
    136c:	51 09       	sbc	r21, r1
    136e:	e3 2e       	mov	r14, r19
    1370:	02 2f       	mov	r16, r18
    1372:	24 2f       	mov	r18, r20
    1374:	ae 01       	movw	r20, r28
    1376:	0e 94 c7 0b 	call	0x178e	; 0x178e <dtoa_prf>
    137a:	ce 01       	movw	r24, r28
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ef 90       	pop	r14
    1386:	08 95       	ret

00001388 <sprintf>:
    1388:	ae e0       	ldi	r26, 0x0E	; 14
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea ec       	ldi	r30, 0xCA	; 202
    138e:	f9 e0       	ldi	r31, 0x09	; 9
    1390:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__prologue_saves__+0x1c>
    1394:	0d 89       	ldd	r16, Y+21	; 0x15
    1396:	1e 89       	ldd	r17, Y+22	; 0x16
    1398:	86 e0       	ldi	r24, 0x06	; 6
    139a:	8c 83       	std	Y+4, r24	; 0x04
    139c:	1a 83       	std	Y+2, r17	; 0x02
    139e:	09 83       	std	Y+1, r16	; 0x01
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f e7       	ldi	r25, 0x7F	; 127
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	ae 01       	movw	r20, r28
    13aa:	47 5e       	subi	r20, 0xE7	; 231
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	6f 89       	ldd	r22, Y+23	; 0x17
    13b0:	78 8d       	ldd	r23, Y+24	; 0x18
    13b2:	ce 01       	movw	r24, r28
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <vfprintf>
    13ba:	ef 81       	ldd	r30, Y+7	; 0x07
    13bc:	f8 85       	ldd	r31, Y+8	; 0x08
    13be:	e0 0f       	add	r30, r16
    13c0:	f1 1f       	adc	r31, r17
    13c2:	10 82       	st	Z, r1
    13c4:	2e 96       	adiw	r28, 0x0e	; 14
    13c6:	e4 e0       	ldi	r30, 0x04	; 4
    13c8:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__epilogue_restores__+0x1c>

000013cc <vfprintf>:
    13cc:	ab e0       	ldi	r26, 0x0B	; 11
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ec ee       	ldi	r30, 0xEC	; 236
    13d2:	f9 e0       	ldi	r31, 0x09	; 9
    13d4:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__prologue_saves__>
    13d8:	6c 01       	movw	r12, r24
    13da:	7b 01       	movw	r14, r22
    13dc:	8a 01       	movw	r16, r20
    13de:	fc 01       	movw	r30, r24
    13e0:	17 82       	std	Z+7, r1	; 0x07
    13e2:	16 82       	std	Z+6, r1	; 0x06
    13e4:	83 81       	ldd	r24, Z+3	; 0x03
    13e6:	81 ff       	sbrs	r24, 1
    13e8:	cc c1       	rjmp	.+920    	; 0x1782 <vfprintf+0x3b6>
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	3c 01       	movw	r6, r24
    13f0:	f6 01       	movw	r30, r12
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	f7 01       	movw	r30, r14
    13f6:	93 fd       	sbrc	r25, 3
    13f8:	85 91       	lpm	r24, Z+
    13fa:	93 ff       	sbrs	r25, 3
    13fc:	81 91       	ld	r24, Z+
    13fe:	7f 01       	movw	r14, r30
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <vfprintf+0x3a>
    1404:	ba c1       	rjmp	.+884    	; 0x177a <vfprintf+0x3ae>
    1406:	85 32       	cpi	r24, 0x25	; 37
    1408:	39 f4       	brne	.+14     	; 0x1418 <vfprintf+0x4c>
    140a:	93 fd       	sbrc	r25, 3
    140c:	85 91       	lpm	r24, Z+
    140e:	93 ff       	sbrs	r25, 3
    1410:	81 91       	ld	r24, Z+
    1412:	7f 01       	movw	r14, r30
    1414:	85 32       	cpi	r24, 0x25	; 37
    1416:	29 f4       	brne	.+10     	; 0x1422 <vfprintf+0x56>
    1418:	b6 01       	movw	r22, r12
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    1420:	e7 cf       	rjmp	.-50     	; 0x13f0 <vfprintf+0x24>
    1422:	91 2c       	mov	r9, r1
    1424:	21 2c       	mov	r2, r1
    1426:	31 2c       	mov	r3, r1
    1428:	ff e1       	ldi	r31, 0x1F	; 31
    142a:	f3 15       	cp	r31, r3
    142c:	d8 f0       	brcs	.+54     	; 0x1464 <vfprintf+0x98>
    142e:	8b 32       	cpi	r24, 0x2B	; 43
    1430:	79 f0       	breq	.+30     	; 0x1450 <vfprintf+0x84>
    1432:	38 f4       	brcc	.+14     	; 0x1442 <vfprintf+0x76>
    1434:	80 32       	cpi	r24, 0x20	; 32
    1436:	79 f0       	breq	.+30     	; 0x1456 <vfprintf+0x8a>
    1438:	83 32       	cpi	r24, 0x23	; 35
    143a:	a1 f4       	brne	.+40     	; 0x1464 <vfprintf+0x98>
    143c:	23 2d       	mov	r18, r3
    143e:	20 61       	ori	r18, 0x10	; 16
    1440:	1d c0       	rjmp	.+58     	; 0x147c <vfprintf+0xb0>
    1442:	8d 32       	cpi	r24, 0x2D	; 45
    1444:	61 f0       	breq	.+24     	; 0x145e <vfprintf+0x92>
    1446:	80 33       	cpi	r24, 0x30	; 48
    1448:	69 f4       	brne	.+26     	; 0x1464 <vfprintf+0x98>
    144a:	23 2d       	mov	r18, r3
    144c:	21 60       	ori	r18, 0x01	; 1
    144e:	16 c0       	rjmp	.+44     	; 0x147c <vfprintf+0xb0>
    1450:	83 2d       	mov	r24, r3
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	38 2e       	mov	r3, r24
    1456:	e3 2d       	mov	r30, r3
    1458:	e4 60       	ori	r30, 0x04	; 4
    145a:	3e 2e       	mov	r3, r30
    145c:	2a c0       	rjmp	.+84     	; 0x14b2 <vfprintf+0xe6>
    145e:	f3 2d       	mov	r31, r3
    1460:	f8 60       	ori	r31, 0x08	; 8
    1462:	1d c0       	rjmp	.+58     	; 0x149e <vfprintf+0xd2>
    1464:	37 fc       	sbrc	r3, 7
    1466:	2d c0       	rjmp	.+90     	; 0x14c2 <vfprintf+0xf6>
    1468:	20 ed       	ldi	r18, 0xD0	; 208
    146a:	28 0f       	add	r18, r24
    146c:	2a 30       	cpi	r18, 0x0A	; 10
    146e:	40 f0       	brcs	.+16     	; 0x1480 <vfprintf+0xb4>
    1470:	8e 32       	cpi	r24, 0x2E	; 46
    1472:	b9 f4       	brne	.+46     	; 0x14a2 <vfprintf+0xd6>
    1474:	36 fc       	sbrc	r3, 6
    1476:	81 c1       	rjmp	.+770    	; 0x177a <vfprintf+0x3ae>
    1478:	23 2d       	mov	r18, r3
    147a:	20 64       	ori	r18, 0x40	; 64
    147c:	32 2e       	mov	r3, r18
    147e:	19 c0       	rjmp	.+50     	; 0x14b2 <vfprintf+0xe6>
    1480:	36 fe       	sbrs	r3, 6
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <vfprintf+0xc4>
    1484:	8a e0       	ldi	r24, 0x0A	; 10
    1486:	98 9e       	mul	r9, r24
    1488:	20 0d       	add	r18, r0
    148a:	11 24       	eor	r1, r1
    148c:	92 2e       	mov	r9, r18
    148e:	11 c0       	rjmp	.+34     	; 0x14b2 <vfprintf+0xe6>
    1490:	ea e0       	ldi	r30, 0x0A	; 10
    1492:	2e 9e       	mul	r2, r30
    1494:	20 0d       	add	r18, r0
    1496:	11 24       	eor	r1, r1
    1498:	22 2e       	mov	r2, r18
    149a:	f3 2d       	mov	r31, r3
    149c:	f0 62       	ori	r31, 0x20	; 32
    149e:	3f 2e       	mov	r3, r31
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <vfprintf+0xe6>
    14a2:	8c 36       	cpi	r24, 0x6C	; 108
    14a4:	21 f4       	brne	.+8      	; 0x14ae <vfprintf+0xe2>
    14a6:	83 2d       	mov	r24, r3
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	38 2e       	mov	r3, r24
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0xe6>
    14ae:	88 36       	cpi	r24, 0x68	; 104
    14b0:	41 f4       	brne	.+16     	; 0x14c2 <vfprintf+0xf6>
    14b2:	f7 01       	movw	r30, r14
    14b4:	93 fd       	sbrc	r25, 3
    14b6:	85 91       	lpm	r24, Z+
    14b8:	93 ff       	sbrs	r25, 3
    14ba:	81 91       	ld	r24, Z+
    14bc:	7f 01       	movw	r14, r30
    14be:	81 11       	cpse	r24, r1
    14c0:	b3 cf       	rjmp	.-154    	; 0x1428 <vfprintf+0x5c>
    14c2:	98 2f       	mov	r25, r24
    14c4:	9f 7d       	andi	r25, 0xDF	; 223
    14c6:	95 54       	subi	r25, 0x45	; 69
    14c8:	93 30       	cpi	r25, 0x03	; 3
    14ca:	28 f4       	brcc	.+10     	; 0x14d6 <vfprintf+0x10a>
    14cc:	0c 5f       	subi	r16, 0xFC	; 252
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	9f e3       	ldi	r25, 0x3F	; 63
    14d2:	99 83       	std	Y+1, r25	; 0x01
    14d4:	0d c0       	rjmp	.+26     	; 0x14f0 <vfprintf+0x124>
    14d6:	83 36       	cpi	r24, 0x63	; 99
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <vfprintf+0x11a>
    14da:	83 37       	cpi	r24, 0x73	; 115
    14dc:	71 f0       	breq	.+28     	; 0x14fa <vfprintf+0x12e>
    14de:	83 35       	cpi	r24, 0x53	; 83
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <vfprintf+0x118>
    14e2:	59 c0       	rjmp	.+178    	; 0x1596 <vfprintf+0x1ca>
    14e4:	21 c0       	rjmp	.+66     	; 0x1528 <vfprintf+0x15c>
    14e6:	f8 01       	movw	r30, r16
    14e8:	80 81       	ld	r24, Z
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	0e 5f       	subi	r16, 0xFE	; 254
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
    14f0:	88 24       	eor	r8, r8
    14f2:	83 94       	inc	r8
    14f4:	91 2c       	mov	r9, r1
    14f6:	53 01       	movw	r10, r6
    14f8:	13 c0       	rjmp	.+38     	; 0x1520 <vfprintf+0x154>
    14fa:	28 01       	movw	r4, r16
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	4f 0e       	add	r4, r31
    1500:	51 1c       	adc	r5, r1
    1502:	f8 01       	movw	r30, r16
    1504:	a0 80       	ld	r10, Z
    1506:	b1 80       	ldd	r11, Z+1	; 0x01
    1508:	36 fe       	sbrs	r3, 6
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <vfprintf+0x146>
    150c:	69 2d       	mov	r22, r9
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x14a>
    1512:	6f ef       	ldi	r22, 0xFF	; 255
    1514:	7f ef       	ldi	r23, 0xFF	; 255
    1516:	c5 01       	movw	r24, r10
    1518:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <strnlen>
    151c:	4c 01       	movw	r8, r24
    151e:	82 01       	movw	r16, r4
    1520:	f3 2d       	mov	r31, r3
    1522:	ff 77       	andi	r31, 0x7F	; 127
    1524:	3f 2e       	mov	r3, r31
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <vfprintf+0x188>
    1528:	28 01       	movw	r4, r16
    152a:	22 e0       	ldi	r18, 0x02	; 2
    152c:	42 0e       	add	r4, r18
    152e:	51 1c       	adc	r5, r1
    1530:	f8 01       	movw	r30, r16
    1532:	a0 80       	ld	r10, Z
    1534:	b1 80       	ldd	r11, Z+1	; 0x01
    1536:	36 fe       	sbrs	r3, 6
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <vfprintf+0x174>
    153a:	69 2d       	mov	r22, r9
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0x178>
    1540:	6f ef       	ldi	r22, 0xFF	; 255
    1542:	7f ef       	ldi	r23, 0xFF	; 255
    1544:	c5 01       	movw	r24, r10
    1546:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <strnlen_P>
    154a:	4c 01       	movw	r8, r24
    154c:	f3 2d       	mov	r31, r3
    154e:	f0 68       	ori	r31, 0x80	; 128
    1550:	3f 2e       	mov	r3, r31
    1552:	82 01       	movw	r16, r4
    1554:	33 fc       	sbrc	r3, 3
    1556:	1b c0       	rjmp	.+54     	; 0x158e <vfprintf+0x1c2>
    1558:	82 2d       	mov	r24, r2
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 16       	cp	r8, r24
    155e:	99 06       	cpc	r9, r25
    1560:	b0 f4       	brcc	.+44     	; 0x158e <vfprintf+0x1c2>
    1562:	b6 01       	movw	r22, r12
    1564:	80 e2       	ldi	r24, 0x20	; 32
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    156c:	2a 94       	dec	r2
    156e:	f4 cf       	rjmp	.-24     	; 0x1558 <vfprintf+0x18c>
    1570:	f5 01       	movw	r30, r10
    1572:	37 fc       	sbrc	r3, 7
    1574:	85 91       	lpm	r24, Z+
    1576:	37 fe       	sbrs	r3, 7
    1578:	81 91       	ld	r24, Z+
    157a:	5f 01       	movw	r10, r30
    157c:	b6 01       	movw	r22, r12
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    1584:	21 10       	cpse	r2, r1
    1586:	2a 94       	dec	r2
    1588:	21 e0       	ldi	r18, 0x01	; 1
    158a:	82 1a       	sub	r8, r18
    158c:	91 08       	sbc	r9, r1
    158e:	81 14       	cp	r8, r1
    1590:	91 04       	cpc	r9, r1
    1592:	71 f7       	brne	.-36     	; 0x1570 <vfprintf+0x1a4>
    1594:	e8 c0       	rjmp	.+464    	; 0x1766 <vfprintf+0x39a>
    1596:	84 36       	cpi	r24, 0x64	; 100
    1598:	11 f0       	breq	.+4      	; 0x159e <vfprintf+0x1d2>
    159a:	89 36       	cpi	r24, 0x69	; 105
    159c:	41 f5       	brne	.+80     	; 0x15ee <vfprintf+0x222>
    159e:	f8 01       	movw	r30, r16
    15a0:	37 fe       	sbrs	r3, 7
    15a2:	07 c0       	rjmp	.+14     	; 0x15b2 <vfprintf+0x1e6>
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	0c 5f       	subi	r16, 0xFC	; 252
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <vfprintf+0x1f6>
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	07 2e       	mov	r0, r23
    15b8:	00 0c       	add	r0, r0
    15ba:	88 0b       	sbc	r24, r24
    15bc:	99 0b       	sbc	r25, r25
    15be:	0e 5f       	subi	r16, 0xFE	; 254
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	f3 2d       	mov	r31, r3
    15c4:	ff 76       	andi	r31, 0x6F	; 111
    15c6:	3f 2e       	mov	r3, r31
    15c8:	97 ff       	sbrs	r25, 7
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <vfprintf+0x212>
    15cc:	90 95       	com	r25
    15ce:	80 95       	com	r24
    15d0:	70 95       	com	r23
    15d2:	61 95       	neg	r22
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	8f 4f       	sbci	r24, 0xFF	; 255
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	f0 68       	ori	r31, 0x80	; 128
    15dc:	3f 2e       	mov	r3, r31
    15de:	2a e0       	ldi	r18, 0x0A	; 10
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	a3 01       	movw	r20, r6
    15e4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__ultoa_invert>
    15e8:	88 2e       	mov	r8, r24
    15ea:	86 18       	sub	r8, r6
    15ec:	45 c0       	rjmp	.+138    	; 0x1678 <vfprintf+0x2ac>
    15ee:	85 37       	cpi	r24, 0x75	; 117
    15f0:	31 f4       	brne	.+12     	; 0x15fe <vfprintf+0x232>
    15f2:	23 2d       	mov	r18, r3
    15f4:	2f 7e       	andi	r18, 0xEF	; 239
    15f6:	b2 2e       	mov	r11, r18
    15f8:	2a e0       	ldi	r18, 0x0A	; 10
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	25 c0       	rjmp	.+74     	; 0x1648 <vfprintf+0x27c>
    15fe:	93 2d       	mov	r25, r3
    1600:	99 7f       	andi	r25, 0xF9	; 249
    1602:	b9 2e       	mov	r11, r25
    1604:	8f 36       	cpi	r24, 0x6F	; 111
    1606:	c1 f0       	breq	.+48     	; 0x1638 <vfprintf+0x26c>
    1608:	18 f4       	brcc	.+6      	; 0x1610 <vfprintf+0x244>
    160a:	88 35       	cpi	r24, 0x58	; 88
    160c:	79 f0       	breq	.+30     	; 0x162c <vfprintf+0x260>
    160e:	b5 c0       	rjmp	.+362    	; 0x177a <vfprintf+0x3ae>
    1610:	80 37       	cpi	r24, 0x70	; 112
    1612:	19 f0       	breq	.+6      	; 0x161a <vfprintf+0x24e>
    1614:	88 37       	cpi	r24, 0x78	; 120
    1616:	21 f0       	breq	.+8      	; 0x1620 <vfprintf+0x254>
    1618:	b0 c0       	rjmp	.+352    	; 0x177a <vfprintf+0x3ae>
    161a:	e9 2f       	mov	r30, r25
    161c:	e0 61       	ori	r30, 0x10	; 16
    161e:	be 2e       	mov	r11, r30
    1620:	b4 fe       	sbrs	r11, 4
    1622:	0d c0       	rjmp	.+26     	; 0x163e <vfprintf+0x272>
    1624:	fb 2d       	mov	r31, r11
    1626:	f4 60       	ori	r31, 0x04	; 4
    1628:	bf 2e       	mov	r11, r31
    162a:	09 c0       	rjmp	.+18     	; 0x163e <vfprintf+0x272>
    162c:	34 fe       	sbrs	r3, 4
    162e:	0a c0       	rjmp	.+20     	; 0x1644 <vfprintf+0x278>
    1630:	29 2f       	mov	r18, r25
    1632:	26 60       	ori	r18, 0x06	; 6
    1634:	b2 2e       	mov	r11, r18
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <vfprintf+0x278>
    1638:	28 e0       	ldi	r18, 0x08	; 8
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <vfprintf+0x27c>
    163e:	20 e1       	ldi	r18, 0x10	; 16
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x27c>
    1644:	20 e1       	ldi	r18, 0x10	; 16
    1646:	32 e0       	ldi	r19, 0x02	; 2
    1648:	f8 01       	movw	r30, r16
    164a:	b7 fe       	sbrs	r11, 7
    164c:	07 c0       	rjmp	.+14     	; 0x165c <vfprintf+0x290>
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	0c 5f       	subi	r16, 0xFC	; 252
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x29c>
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 5f       	subi	r16, 0xFE	; 254
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	a3 01       	movw	r20, r6
    166a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__ultoa_invert>
    166e:	88 2e       	mov	r8, r24
    1670:	86 18       	sub	r8, r6
    1672:	fb 2d       	mov	r31, r11
    1674:	ff 77       	andi	r31, 0x7F	; 127
    1676:	3f 2e       	mov	r3, r31
    1678:	36 fe       	sbrs	r3, 6
    167a:	0d c0       	rjmp	.+26     	; 0x1696 <vfprintf+0x2ca>
    167c:	23 2d       	mov	r18, r3
    167e:	2e 7f       	andi	r18, 0xFE	; 254
    1680:	a2 2e       	mov	r10, r18
    1682:	89 14       	cp	r8, r9
    1684:	58 f4       	brcc	.+22     	; 0x169c <vfprintf+0x2d0>
    1686:	34 fe       	sbrs	r3, 4
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <vfprintf+0x2d4>
    168a:	32 fc       	sbrc	r3, 2
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <vfprintf+0x2d4>
    168e:	83 2d       	mov	r24, r3
    1690:	8e 7e       	andi	r24, 0xEE	; 238
    1692:	a8 2e       	mov	r10, r24
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <vfprintf+0x2d4>
    1696:	b8 2c       	mov	r11, r8
    1698:	a3 2c       	mov	r10, r3
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <vfprintf+0x2d6>
    169c:	b8 2c       	mov	r11, r8
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <vfprintf+0x2d6>
    16a0:	b9 2c       	mov	r11, r9
    16a2:	a4 fe       	sbrs	r10, 4
    16a4:	0f c0       	rjmp	.+30     	; 0x16c4 <vfprintf+0x2f8>
    16a6:	fe 01       	movw	r30, r28
    16a8:	e8 0d       	add	r30, r8
    16aa:	f1 1d       	adc	r31, r1
    16ac:	80 81       	ld	r24, Z
    16ae:	80 33       	cpi	r24, 0x30	; 48
    16b0:	21 f4       	brne	.+8      	; 0x16ba <vfprintf+0x2ee>
    16b2:	9a 2d       	mov	r25, r10
    16b4:	99 7e       	andi	r25, 0xE9	; 233
    16b6:	a9 2e       	mov	r10, r25
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <vfprintf+0x300>
    16ba:	a2 fe       	sbrs	r10, 2
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <vfprintf+0x2fe>
    16be:	b3 94       	inc	r11
    16c0:	b3 94       	inc	r11
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <vfprintf+0x300>
    16c4:	8a 2d       	mov	r24, r10
    16c6:	86 78       	andi	r24, 0x86	; 134
    16c8:	09 f0       	breq	.+2      	; 0x16cc <vfprintf+0x300>
    16ca:	b3 94       	inc	r11
    16cc:	a3 fc       	sbrc	r10, 3
    16ce:	11 c0       	rjmp	.+34     	; 0x16f2 <vfprintf+0x326>
    16d0:	a0 fe       	sbrs	r10, 0
    16d2:	06 c0       	rjmp	.+12     	; 0x16e0 <vfprintf+0x314>
    16d4:	b2 14       	cp	r11, r2
    16d6:	88 f4       	brcc	.+34     	; 0x16fa <vfprintf+0x32e>
    16d8:	28 0c       	add	r2, r8
    16da:	92 2c       	mov	r9, r2
    16dc:	9b 18       	sub	r9, r11
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <vfprintf+0x330>
    16e0:	b2 14       	cp	r11, r2
    16e2:	60 f4       	brcc	.+24     	; 0x16fc <vfprintf+0x330>
    16e4:	b6 01       	movw	r22, r12
    16e6:	80 e2       	ldi	r24, 0x20	; 32
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    16ee:	b3 94       	inc	r11
    16f0:	f7 cf       	rjmp	.-18     	; 0x16e0 <vfprintf+0x314>
    16f2:	b2 14       	cp	r11, r2
    16f4:	18 f4       	brcc	.+6      	; 0x16fc <vfprintf+0x330>
    16f6:	2b 18       	sub	r2, r11
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <vfprintf+0x332>
    16fa:	98 2c       	mov	r9, r8
    16fc:	21 2c       	mov	r2, r1
    16fe:	a4 fe       	sbrs	r10, 4
    1700:	10 c0       	rjmp	.+32     	; 0x1722 <vfprintf+0x356>
    1702:	b6 01       	movw	r22, r12
    1704:	80 e3       	ldi	r24, 0x30	; 48
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    170c:	a2 fe       	sbrs	r10, 2
    170e:	17 c0       	rjmp	.+46     	; 0x173e <vfprintf+0x372>
    1710:	a1 fc       	sbrc	r10, 1
    1712:	03 c0       	rjmp	.+6      	; 0x171a <vfprintf+0x34e>
    1714:	88 e7       	ldi	r24, 0x78	; 120
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x352>
    171a:	88 e5       	ldi	r24, 0x58	; 88
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	b6 01       	movw	r22, r12
    1720:	0c c0       	rjmp	.+24     	; 0x173a <vfprintf+0x36e>
    1722:	8a 2d       	mov	r24, r10
    1724:	86 78       	andi	r24, 0x86	; 134
    1726:	59 f0       	breq	.+22     	; 0x173e <vfprintf+0x372>
    1728:	a1 fe       	sbrs	r10, 1
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <vfprintf+0x364>
    172c:	8b e2       	ldi	r24, 0x2B	; 43
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <vfprintf+0x366>
    1730:	80 e2       	ldi	r24, 0x20	; 32
    1732:	a7 fc       	sbrc	r10, 7
    1734:	8d e2       	ldi	r24, 0x2D	; 45
    1736:	b6 01       	movw	r22, r12
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    173e:	89 14       	cp	r8, r9
    1740:	38 f4       	brcc	.+14     	; 0x1750 <vfprintf+0x384>
    1742:	b6 01       	movw	r22, r12
    1744:	80 e3       	ldi	r24, 0x30	; 48
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    174c:	9a 94       	dec	r9
    174e:	f7 cf       	rjmp	.-18     	; 0x173e <vfprintf+0x372>
    1750:	8a 94       	dec	r8
    1752:	f3 01       	movw	r30, r6
    1754:	e8 0d       	add	r30, r8
    1756:	f1 1d       	adc	r31, r1
    1758:	80 81       	ld	r24, Z
    175a:	b6 01       	movw	r22, r12
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    1762:	81 10       	cpse	r8, r1
    1764:	f5 cf       	rjmp	.-22     	; 0x1750 <vfprintf+0x384>
    1766:	22 20       	and	r2, r2
    1768:	09 f4       	brne	.+2      	; 0x176c <vfprintf+0x3a0>
    176a:	42 ce       	rjmp	.-892    	; 0x13f0 <vfprintf+0x24>
    176c:	b6 01       	movw	r22, r12
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    1776:	2a 94       	dec	r2
    1778:	f6 cf       	rjmp	.-20     	; 0x1766 <vfprintf+0x39a>
    177a:	f6 01       	movw	r30, r12
    177c:	86 81       	ldd	r24, Z+6	; 0x06
    177e:	97 81       	ldd	r25, Z+7	; 0x07
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x3ba>
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	9f ef       	ldi	r25, 0xFF	; 255
    1786:	2b 96       	adiw	r28, 0x0b	; 11
    1788:	e2 e1       	ldi	r30, 0x12	; 18
    178a:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__epilogue_restores__>

0000178e <dtoa_prf>:
    178e:	a9 e0       	ldi	r26, 0x09	; 9
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ed ec       	ldi	r30, 0xCD	; 205
    1794:	fb e0       	ldi	r31, 0x0B	; 11
    1796:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__prologue_saves__+0xc>
    179a:	6a 01       	movw	r12, r20
    179c:	12 2f       	mov	r17, r18
    179e:	b0 2e       	mov	r11, r16
    17a0:	2b e3       	ldi	r18, 0x3B	; 59
    17a2:	20 17       	cp	r18, r16
    17a4:	20 f0       	brcs	.+8      	; 0x17ae <dtoa_prf+0x20>
    17a6:	ff 24       	eor	r15, r15
    17a8:	f3 94       	inc	r15
    17aa:	f0 0e       	add	r15, r16
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <dtoa_prf+0x24>
    17ae:	2c e3       	ldi	r18, 0x3C	; 60
    17b0:	f2 2e       	mov	r15, r18
    17b2:	0f 2d       	mov	r16, r15
    17b4:	27 e0       	ldi	r18, 0x07	; 7
    17b6:	ae 01       	movw	r20, r28
    17b8:	4f 5f       	subi	r20, 0xFF	; 255
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__ftoa_engine>
    17c0:	bc 01       	movw	r22, r24
    17c2:	49 81       	ldd	r20, Y+1	; 0x01
    17c4:	84 2f       	mov	r24, r20
    17c6:	89 70       	andi	r24, 0x09	; 9
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	31 f0       	breq	.+12     	; 0x17d8 <dtoa_prf+0x4a>
    17cc:	e1 fc       	sbrc	r14, 1
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <dtoa_prf+0x4e>
    17d0:	e0 fe       	sbrs	r14, 0
    17d2:	06 c0       	rjmp	.+12     	; 0x17e0 <dtoa_prf+0x52>
    17d4:	90 e2       	ldi	r25, 0x20	; 32
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <dtoa_prf+0x54>
    17d8:	9d e2       	ldi	r25, 0x2D	; 45
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <dtoa_prf+0x54>
    17dc:	9b e2       	ldi	r25, 0x2B	; 43
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <dtoa_prf+0x54>
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	5e 2d       	mov	r21, r14
    17e4:	50 71       	andi	r21, 0x10	; 16
    17e6:	43 ff       	sbrs	r20, 3
    17e8:	3c c0       	rjmp	.+120    	; 0x1862 <dtoa_prf+0xd4>
    17ea:	91 11       	cpse	r25, r1
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <dtoa_prf+0x64>
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <dtoa_prf+0x66>
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	81 17       	cp	r24, r17
    17f6:	18 f4       	brcc	.+6      	; 0x17fe <dtoa_prf+0x70>
    17f8:	21 2f       	mov	r18, r17
    17fa:	28 1b       	sub	r18, r24
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <dtoa_prf+0x72>
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	51 11       	cpse	r21, r1
    1802:	0b c0       	rjmp	.+22     	; 0x181a <dtoa_prf+0x8c>
    1804:	f6 01       	movw	r30, r12
    1806:	82 2f       	mov	r24, r18
    1808:	30 e2       	ldi	r19, 0x20	; 32
    180a:	88 23       	and	r24, r24
    180c:	19 f0       	breq	.+6      	; 0x1814 <dtoa_prf+0x86>
    180e:	31 93       	st	Z+, r19
    1810:	81 50       	subi	r24, 0x01	; 1
    1812:	fb cf       	rjmp	.-10     	; 0x180a <dtoa_prf+0x7c>
    1814:	c2 0e       	add	r12, r18
    1816:	d1 1c       	adc	r13, r1
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	99 23       	and	r25, r25
    181c:	29 f0       	breq	.+10     	; 0x1828 <dtoa_prf+0x9a>
    181e:	d6 01       	movw	r26, r12
    1820:	9c 93       	st	X, r25
    1822:	f6 01       	movw	r30, r12
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	6f 01       	movw	r12, r30
    1828:	c6 01       	movw	r24, r12
    182a:	03 96       	adiw	r24, 0x03	; 3
    182c:	e2 fe       	sbrs	r14, 2
    182e:	0a c0       	rjmp	.+20     	; 0x1844 <dtoa_prf+0xb6>
    1830:	3e e4       	ldi	r19, 0x4E	; 78
    1832:	d6 01       	movw	r26, r12
    1834:	3c 93       	st	X, r19
    1836:	41 e4       	ldi	r20, 0x41	; 65
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	4c 93       	st	X, r20
    183c:	11 97       	sbiw	r26, 0x01	; 1
    183e:	12 96       	adiw	r26, 0x02	; 2
    1840:	3c 93       	st	X, r19
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <dtoa_prf+0xc2>
    1844:	3e e6       	ldi	r19, 0x6E	; 110
    1846:	f6 01       	movw	r30, r12
    1848:	30 83       	st	Z, r19
    184a:	41 e6       	ldi	r20, 0x61	; 97
    184c:	41 83       	std	Z+1, r20	; 0x01
    184e:	32 83       	std	Z+2, r19	; 0x02
    1850:	fc 01       	movw	r30, r24
    1852:	32 2f       	mov	r19, r18
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	33 23       	and	r19, r19
    1858:	09 f4       	brne	.+2      	; 0x185c <dtoa_prf+0xce>
    185a:	42 c0       	rjmp	.+132    	; 0x18e0 <dtoa_prf+0x152>
    185c:	41 93       	st	Z+, r20
    185e:	31 50       	subi	r19, 0x01	; 1
    1860:	fa cf       	rjmp	.-12     	; 0x1856 <dtoa_prf+0xc8>
    1862:	42 ff       	sbrs	r20, 2
    1864:	44 c0       	rjmp	.+136    	; 0x18ee <dtoa_prf+0x160>
    1866:	91 11       	cpse	r25, r1
    1868:	02 c0       	rjmp	.+4      	; 0x186e <dtoa_prf+0xe0>
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <dtoa_prf+0xe2>
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	81 17       	cp	r24, r17
    1872:	18 f4       	brcc	.+6      	; 0x187a <dtoa_prf+0xec>
    1874:	21 2f       	mov	r18, r17
    1876:	28 1b       	sub	r18, r24
    1878:	01 c0       	rjmp	.+2      	; 0x187c <dtoa_prf+0xee>
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	51 11       	cpse	r21, r1
    187e:	0b c0       	rjmp	.+22     	; 0x1896 <dtoa_prf+0x108>
    1880:	f6 01       	movw	r30, r12
    1882:	82 2f       	mov	r24, r18
    1884:	30 e2       	ldi	r19, 0x20	; 32
    1886:	88 23       	and	r24, r24
    1888:	19 f0       	breq	.+6      	; 0x1890 <dtoa_prf+0x102>
    188a:	31 93       	st	Z+, r19
    188c:	81 50       	subi	r24, 0x01	; 1
    188e:	fb cf       	rjmp	.-10     	; 0x1886 <dtoa_prf+0xf8>
    1890:	c2 0e       	add	r12, r18
    1892:	d1 1c       	adc	r13, r1
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	99 23       	and	r25, r25
    1898:	29 f0       	breq	.+10     	; 0x18a4 <dtoa_prf+0x116>
    189a:	d6 01       	movw	r26, r12
    189c:	9c 93       	st	X, r25
    189e:	f6 01       	movw	r30, r12
    18a0:	31 96       	adiw	r30, 0x01	; 1
    18a2:	6f 01       	movw	r12, r30
    18a4:	c6 01       	movw	r24, r12
    18a6:	03 96       	adiw	r24, 0x03	; 3
    18a8:	e2 fe       	sbrs	r14, 2
    18aa:	0b c0       	rjmp	.+22     	; 0x18c2 <dtoa_prf+0x134>
    18ac:	39 e4       	ldi	r19, 0x49	; 73
    18ae:	d6 01       	movw	r26, r12
    18b0:	3c 93       	st	X, r19
    18b2:	3e e4       	ldi	r19, 0x4E	; 78
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	3c 93       	st	X, r19
    18b8:	11 97       	sbiw	r26, 0x01	; 1
    18ba:	36 e4       	ldi	r19, 0x46	; 70
    18bc:	12 96       	adiw	r26, 0x02	; 2
    18be:	3c 93       	st	X, r19
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <dtoa_prf+0x142>
    18c2:	39 e6       	ldi	r19, 0x69	; 105
    18c4:	f6 01       	movw	r30, r12
    18c6:	30 83       	st	Z, r19
    18c8:	3e e6       	ldi	r19, 0x6E	; 110
    18ca:	31 83       	std	Z+1, r19	; 0x01
    18cc:	36 e6       	ldi	r19, 0x66	; 102
    18ce:	32 83       	std	Z+2, r19	; 0x02
    18d0:	fc 01       	movw	r30, r24
    18d2:	32 2f       	mov	r19, r18
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	33 23       	and	r19, r19
    18d8:	19 f0       	breq	.+6      	; 0x18e0 <dtoa_prf+0x152>
    18da:	41 93       	st	Z+, r20
    18dc:	31 50       	subi	r19, 0x01	; 1
    18de:	fb cf       	rjmp	.-10     	; 0x18d6 <dtoa_prf+0x148>
    18e0:	fc 01       	movw	r30, r24
    18e2:	e2 0f       	add	r30, r18
    18e4:	f1 1d       	adc	r31, r1
    18e6:	10 82       	st	Z, r1
    18e8:	8e ef       	ldi	r24, 0xFE	; 254
    18ea:	9f ef       	ldi	r25, 0xFF	; 255
    18ec:	a6 c0       	rjmp	.+332    	; 0x1a3a <dtoa_prf+0x2ac>
    18ee:	21 e0       	ldi	r18, 0x01	; 1
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	91 11       	cpse	r25, r1
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <dtoa_prf+0x16c>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	16 16       	cp	r1, r22
    18fc:	17 06       	cpc	r1, r23
    18fe:	1c f4       	brge	.+6      	; 0x1906 <dtoa_prf+0x178>
    1900:	fb 01       	movw	r30, r22
    1902:	31 96       	adiw	r30, 0x01	; 1
    1904:	02 c0       	rjmp	.+4      	; 0x190a <dtoa_prf+0x17c>
    1906:	e1 e0       	ldi	r30, 0x01	; 1
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	2e 0f       	add	r18, r30
    190c:	3f 1f       	adc	r19, r31
    190e:	bb 20       	and	r11, r11
    1910:	21 f0       	breq	.+8      	; 0x191a <dtoa_prf+0x18c>
    1912:	eb 2d       	mov	r30, r11
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	02 c0       	rjmp	.+4      	; 0x191e <dtoa_prf+0x190>
    191a:	e0 e0       	ldi	r30, 0x00	; 0
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	2e 0f       	add	r18, r30
    1920:	3f 1f       	adc	r19, r31
    1922:	e1 2f       	mov	r30, r17
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	2e 17       	cp	r18, r30
    1928:	3f 07       	cpc	r19, r31
    192a:	1c f4       	brge	.+6      	; 0x1932 <dtoa_prf+0x1a4>
    192c:	12 1b       	sub	r17, r18
    192e:	21 2f       	mov	r18, r17
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <dtoa_prf+0x1a6>
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	8e 2d       	mov	r24, r14
    1936:	88 71       	andi	r24, 0x18	; 24
    1938:	59 f4       	brne	.+22     	; 0x1950 <dtoa_prf+0x1c2>
    193a:	f6 01       	movw	r30, r12
    193c:	82 2f       	mov	r24, r18
    193e:	30 e2       	ldi	r19, 0x20	; 32
    1940:	88 23       	and	r24, r24
    1942:	19 f0       	breq	.+6      	; 0x194a <dtoa_prf+0x1bc>
    1944:	31 93       	st	Z+, r19
    1946:	81 50       	subi	r24, 0x01	; 1
    1948:	fb cf       	rjmp	.-10     	; 0x1940 <dtoa_prf+0x1b2>
    194a:	c2 0e       	add	r12, r18
    194c:	d1 1c       	adc	r13, r1
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	99 23       	and	r25, r25
    1952:	29 f0       	breq	.+10     	; 0x195e <dtoa_prf+0x1d0>
    1954:	d6 01       	movw	r26, r12
    1956:	9c 93       	st	X, r25
    1958:	f6 01       	movw	r30, r12
    195a:	31 96       	adiw	r30, 0x01	; 1
    195c:	6f 01       	movw	r12, r30
    195e:	51 11       	cpse	r21, r1
    1960:	0b c0       	rjmp	.+22     	; 0x1978 <dtoa_prf+0x1ea>
    1962:	f6 01       	movw	r30, r12
    1964:	82 2f       	mov	r24, r18
    1966:	90 e3       	ldi	r25, 0x30	; 48
    1968:	88 23       	and	r24, r24
    196a:	19 f0       	breq	.+6      	; 0x1972 <dtoa_prf+0x1e4>
    196c:	91 93       	st	Z+, r25
    196e:	81 50       	subi	r24, 0x01	; 1
    1970:	fb cf       	rjmp	.-10     	; 0x1968 <dtoa_prf+0x1da>
    1972:	c2 0e       	add	r12, r18
    1974:	d1 1c       	adc	r13, r1
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	0f 2d       	mov	r16, r15
    197a:	06 0f       	add	r16, r22
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	34 2f       	mov	r19, r20
    1980:	30 71       	andi	r19, 0x10	; 16
    1982:	44 ff       	sbrs	r20, 4
    1984:	03 c0       	rjmp	.+6      	; 0x198c <dtoa_prf+0x1fe>
    1986:	91 33       	cpi	r25, 0x31	; 49
    1988:	09 f4       	brne	.+2      	; 0x198c <dtoa_prf+0x1fe>
    198a:	01 50       	subi	r16, 0x01	; 1
    198c:	10 16       	cp	r1, r16
    198e:	24 f4       	brge	.+8      	; 0x1998 <dtoa_prf+0x20a>
    1990:	09 30       	cpi	r16, 0x09	; 9
    1992:	18 f0       	brcs	.+6      	; 0x199a <dtoa_prf+0x20c>
    1994:	08 e0       	ldi	r16, 0x08	; 8
    1996:	01 c0       	rjmp	.+2      	; 0x199a <dtoa_prf+0x20c>
    1998:	01 e0       	ldi	r16, 0x01	; 1
    199a:	ab 01       	movw	r20, r22
    199c:	77 ff       	sbrs	r23, 7
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <dtoa_prf+0x216>
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	fb 01       	movw	r30, r22
    19a6:	e4 1b       	sub	r30, r20
    19a8:	f5 0b       	sbc	r31, r21
    19aa:	a1 e0       	ldi	r26, 0x01	; 1
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ac 0f       	add	r26, r28
    19b0:	bd 1f       	adc	r27, r29
    19b2:	ea 0f       	add	r30, r26
    19b4:	fb 1f       	adc	r31, r27
    19b6:	8e e2       	ldi	r24, 0x2E	; 46
    19b8:	a8 2e       	mov	r10, r24
    19ba:	4b 01       	movw	r8, r22
    19bc:	80 1a       	sub	r8, r16
    19be:	91 08       	sbc	r9, r1
    19c0:	0b 2d       	mov	r16, r11
    19c2:	10 e0       	ldi	r17, 0x00	; 0
    19c4:	11 95       	neg	r17
    19c6:	01 95       	neg	r16
    19c8:	11 09       	sbc	r17, r1
    19ca:	4f 3f       	cpi	r20, 0xFF	; 255
    19cc:	bf ef       	ldi	r27, 0xFF	; 255
    19ce:	5b 07       	cpc	r21, r27
    19d0:	21 f4       	brne	.+8      	; 0x19da <dtoa_prf+0x24c>
    19d2:	d6 01       	movw	r26, r12
    19d4:	ac 92       	st	X, r10
    19d6:	11 96       	adiw	r26, 0x01	; 1
    19d8:	6d 01       	movw	r12, r26
    19da:	64 17       	cp	r22, r20
    19dc:	75 07       	cpc	r23, r21
    19de:	2c f0       	brlt	.+10     	; 0x19ea <dtoa_prf+0x25c>
    19e0:	84 16       	cp	r8, r20
    19e2:	95 06       	cpc	r9, r21
    19e4:	14 f4       	brge	.+4      	; 0x19ea <dtoa_prf+0x25c>
    19e6:	81 81       	ldd	r24, Z+1	; 0x01
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <dtoa_prf+0x25e>
    19ea:	80 e3       	ldi	r24, 0x30	; 48
    19ec:	41 50       	subi	r20, 0x01	; 1
    19ee:	51 09       	sbc	r21, r1
    19f0:	31 96       	adiw	r30, 0x01	; 1
    19f2:	d6 01       	movw	r26, r12
    19f4:	11 96       	adiw	r26, 0x01	; 1
    19f6:	7d 01       	movw	r14, r26
    19f8:	40 17       	cp	r20, r16
    19fa:	51 07       	cpc	r21, r17
    19fc:	24 f0       	brlt	.+8      	; 0x1a06 <dtoa_prf+0x278>
    19fe:	d6 01       	movw	r26, r12
    1a00:	8c 93       	st	X, r24
    1a02:	67 01       	movw	r12, r14
    1a04:	e2 cf       	rjmp	.-60     	; 0x19ca <dtoa_prf+0x23c>
    1a06:	64 17       	cp	r22, r20
    1a08:	75 07       	cpc	r23, r21
    1a0a:	39 f4       	brne	.+14     	; 0x1a1a <dtoa_prf+0x28c>
    1a0c:	96 33       	cpi	r25, 0x36	; 54
    1a0e:	20 f4       	brcc	.+8      	; 0x1a18 <dtoa_prf+0x28a>
    1a10:	95 33       	cpi	r25, 0x35	; 53
    1a12:	19 f4       	brne	.+6      	; 0x1a1a <dtoa_prf+0x28c>
    1a14:	31 11       	cpse	r19, r1
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <dtoa_prf+0x28c>
    1a18:	81 e3       	ldi	r24, 0x31	; 49
    1a1a:	f6 01       	movw	r30, r12
    1a1c:	80 83       	st	Z, r24
    1a1e:	f7 01       	movw	r30, r14
    1a20:	82 2f       	mov	r24, r18
    1a22:	90 e2       	ldi	r25, 0x20	; 32
    1a24:	88 23       	and	r24, r24
    1a26:	19 f0       	breq	.+6      	; 0x1a2e <dtoa_prf+0x2a0>
    1a28:	91 93       	st	Z+, r25
    1a2a:	81 50       	subi	r24, 0x01	; 1
    1a2c:	fb cf       	rjmp	.-10     	; 0x1a24 <dtoa_prf+0x296>
    1a2e:	f7 01       	movw	r30, r14
    1a30:	e2 0f       	add	r30, r18
    1a32:	f1 1d       	adc	r31, r1
    1a34:	10 82       	st	Z, r1
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	29 96       	adiw	r28, 0x09	; 9
    1a3c:	ec e0       	ldi	r30, 0x0C	; 12
    1a3e:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__epilogue_restores__+0xc>

00001a42 <__ftoa_engine>:
    1a42:	28 30       	cpi	r18, 0x08	; 8
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <__ftoa_engine+0x6>
    1a46:	27 e0       	ldi	r18, 0x07	; 7
    1a48:	33 27       	eor	r19, r19
    1a4a:	da 01       	movw	r26, r20
    1a4c:	99 0f       	add	r25, r25
    1a4e:	31 1d       	adc	r19, r1
    1a50:	87 fd       	sbrc	r24, 7
    1a52:	91 60       	ori	r25, 0x01	; 1
    1a54:	00 96       	adiw	r24, 0x00	; 0
    1a56:	61 05       	cpc	r22, r1
    1a58:	71 05       	cpc	r23, r1
    1a5a:	39 f4       	brne	.+14     	; 0x1a6a <__ftoa_engine+0x28>
    1a5c:	32 60       	ori	r19, 0x02	; 2
    1a5e:	2e 5f       	subi	r18, 0xFE	; 254
    1a60:	3d 93       	st	X+, r19
    1a62:	30 e3       	ldi	r19, 0x30	; 48
    1a64:	2a 95       	dec	r18
    1a66:	e1 f7       	brne	.-8      	; 0x1a60 <__ftoa_engine+0x1e>
    1a68:	08 95       	ret
    1a6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6c:	30 f0       	brcs	.+12     	; 0x1a7a <__ftoa_engine+0x38>
    1a6e:	80 38       	cpi	r24, 0x80	; 128
    1a70:	71 05       	cpc	r23, r1
    1a72:	61 05       	cpc	r22, r1
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <__ftoa_engine+0x36>
    1a76:	3c 5f       	subi	r19, 0xFC	; 252
    1a78:	3c 5f       	subi	r19, 0xFC	; 252
    1a7a:	3d 93       	st	X+, r19
    1a7c:	91 30       	cpi	r25, 0x01	; 1
    1a7e:	08 f0       	brcs	.+2      	; 0x1a82 <__ftoa_engine+0x40>
    1a80:	80 68       	ori	r24, 0x80	; 128
    1a82:	91 1d       	adc	r25, r1
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	1f 93       	push	r17
    1a8a:	0f 93       	push	r16
    1a8c:	ff 92       	push	r15
    1a8e:	ef 92       	push	r14
    1a90:	19 2f       	mov	r17, r25
    1a92:	98 7f       	andi	r25, 0xF8	; 248
    1a94:	96 95       	lsr	r25
    1a96:	e9 2f       	mov	r30, r25
    1a98:	96 95       	lsr	r25
    1a9a:	96 95       	lsr	r25
    1a9c:	e9 0f       	add	r30, r25
    1a9e:	ff 27       	eor	r31, r31
    1aa0:	e0 51       	subi	r30, 0x10	; 16
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	99 27       	eor	r25, r25
    1aa6:	33 27       	eor	r19, r19
    1aa8:	ee 24       	eor	r14, r14
    1aaa:	ff 24       	eor	r15, r15
    1aac:	a7 01       	movw	r20, r14
    1aae:	e7 01       	movw	r28, r14
    1ab0:	05 90       	lpm	r0, Z+
    1ab2:	08 94       	sec
    1ab4:	07 94       	ror	r0
    1ab6:	28 f4       	brcc	.+10     	; 0x1ac2 <__ftoa_engine+0x80>
    1ab8:	36 0f       	add	r19, r22
    1aba:	e7 1e       	adc	r14, r23
    1abc:	f8 1e       	adc	r15, r24
    1abe:	49 1f       	adc	r20, r25
    1ac0:	51 1d       	adc	r21, r1
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	06 94       	lsr	r0
    1acc:	a1 f7       	brne	.-24     	; 0x1ab6 <__ftoa_engine+0x74>
    1ace:	05 90       	lpm	r0, Z+
    1ad0:	07 94       	ror	r0
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__ftoa_engine+0x9c>
    1ad4:	e7 0e       	add	r14, r23
    1ad6:	f8 1e       	adc	r15, r24
    1ad8:	49 1f       	adc	r20, r25
    1ada:	56 1f       	adc	r21, r22
    1adc:	c1 1d       	adc	r28, r1
    1ade:	77 0f       	add	r23, r23
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	66 1f       	adc	r22, r22
    1ae6:	06 94       	lsr	r0
    1ae8:	a1 f7       	brne	.-24     	; 0x1ad2 <__ftoa_engine+0x90>
    1aea:	05 90       	lpm	r0, Z+
    1aec:	07 94       	ror	r0
    1aee:	28 f4       	brcc	.+10     	; 0x1afa <__ftoa_engine+0xb8>
    1af0:	f8 0e       	add	r15, r24
    1af2:	49 1f       	adc	r20, r25
    1af4:	56 1f       	adc	r21, r22
    1af6:	c7 1f       	adc	r28, r23
    1af8:	d1 1d       	adc	r29, r1
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	66 1f       	adc	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	06 94       	lsr	r0
    1b04:	a1 f7       	brne	.-24     	; 0x1aee <__ftoa_engine+0xac>
    1b06:	05 90       	lpm	r0, Z+
    1b08:	07 94       	ror	r0
    1b0a:	20 f4       	brcc	.+8      	; 0x1b14 <__ftoa_engine+0xd2>
    1b0c:	49 0f       	add	r20, r25
    1b0e:	56 1f       	adc	r21, r22
    1b10:	c7 1f       	adc	r28, r23
    1b12:	d8 1f       	adc	r29, r24
    1b14:	99 0f       	add	r25, r25
    1b16:	66 1f       	adc	r22, r22
    1b18:	77 1f       	adc	r23, r23
    1b1a:	88 1f       	adc	r24, r24
    1b1c:	06 94       	lsr	r0
    1b1e:	a9 f7       	brne	.-22     	; 0x1b0a <__ftoa_engine+0xc8>
    1b20:	84 91       	lpm	r24, Z
    1b22:	10 95       	com	r17
    1b24:	17 70       	andi	r17, 0x07	; 7
    1b26:	41 f0       	breq	.+16     	; 0x1b38 <__ftoa_engine+0xf6>
    1b28:	d6 95       	lsr	r29
    1b2a:	c7 95       	ror	r28
    1b2c:	57 95       	ror	r21
    1b2e:	47 95       	ror	r20
    1b30:	f7 94       	ror	r15
    1b32:	e7 94       	ror	r14
    1b34:	1a 95       	dec	r17
    1b36:	c1 f7       	brne	.-16     	; 0x1b28 <__ftoa_engine+0xe6>
    1b38:	e6 e9       	ldi	r30, 0x96	; 150
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	68 94       	set
    1b3e:	15 90       	lpm	r1, Z+
    1b40:	15 91       	lpm	r17, Z+
    1b42:	35 91       	lpm	r19, Z+
    1b44:	65 91       	lpm	r22, Z+
    1b46:	95 91       	lpm	r25, Z+
    1b48:	05 90       	lpm	r0, Z+
    1b4a:	7f e2       	ldi	r23, 0x2F	; 47
    1b4c:	73 95       	inc	r23
    1b4e:	e1 18       	sub	r14, r1
    1b50:	f1 0a       	sbc	r15, r17
    1b52:	43 0b       	sbc	r20, r19
    1b54:	56 0b       	sbc	r21, r22
    1b56:	c9 0b       	sbc	r28, r25
    1b58:	d0 09       	sbc	r29, r0
    1b5a:	c0 f7       	brcc	.-16     	; 0x1b4c <__ftoa_engine+0x10a>
    1b5c:	e1 0c       	add	r14, r1
    1b5e:	f1 1e       	adc	r15, r17
    1b60:	43 1f       	adc	r20, r19
    1b62:	56 1f       	adc	r21, r22
    1b64:	c9 1f       	adc	r28, r25
    1b66:	d0 1d       	adc	r29, r0
    1b68:	7e f4       	brtc	.+30     	; 0x1b88 <__ftoa_engine+0x146>
    1b6a:	70 33       	cpi	r23, 0x30	; 48
    1b6c:	11 f4       	brne	.+4      	; 0x1b72 <__ftoa_engine+0x130>
    1b6e:	8a 95       	dec	r24
    1b70:	e6 cf       	rjmp	.-52     	; 0x1b3e <__ftoa_engine+0xfc>
    1b72:	e8 94       	clt
    1b74:	01 50       	subi	r16, 0x01	; 1
    1b76:	30 f0       	brcs	.+12     	; 0x1b84 <__ftoa_engine+0x142>
    1b78:	08 0f       	add	r16, r24
    1b7a:	0a f4       	brpl	.+2      	; 0x1b7e <__ftoa_engine+0x13c>
    1b7c:	00 27       	eor	r16, r16
    1b7e:	02 17       	cp	r16, r18
    1b80:	08 f4       	brcc	.+2      	; 0x1b84 <__ftoa_engine+0x142>
    1b82:	20 2f       	mov	r18, r16
    1b84:	23 95       	inc	r18
    1b86:	02 2f       	mov	r16, r18
    1b88:	7a 33       	cpi	r23, 0x3A	; 58
    1b8a:	28 f0       	brcs	.+10     	; 0x1b96 <__ftoa_engine+0x154>
    1b8c:	79 e3       	ldi	r23, 0x39	; 57
    1b8e:	7d 93       	st	X+, r23
    1b90:	2a 95       	dec	r18
    1b92:	e9 f7       	brne	.-6      	; 0x1b8e <__ftoa_engine+0x14c>
    1b94:	10 c0       	rjmp	.+32     	; 0x1bb6 <__ftoa_engine+0x174>
    1b96:	7d 93       	st	X+, r23
    1b98:	2a 95       	dec	r18
    1b9a:	89 f6       	brne	.-94     	; 0x1b3e <__ftoa_engine+0xfc>
    1b9c:	06 94       	lsr	r0
    1b9e:	97 95       	ror	r25
    1ba0:	67 95       	ror	r22
    1ba2:	37 95       	ror	r19
    1ba4:	17 95       	ror	r17
    1ba6:	17 94       	ror	r1
    1ba8:	e1 18       	sub	r14, r1
    1baa:	f1 0a       	sbc	r15, r17
    1bac:	43 0b       	sbc	r20, r19
    1bae:	56 0b       	sbc	r21, r22
    1bb0:	c9 0b       	sbc	r28, r25
    1bb2:	d0 09       	sbc	r29, r0
    1bb4:	98 f0       	brcs	.+38     	; 0x1bdc <__ftoa_engine+0x19a>
    1bb6:	23 95       	inc	r18
    1bb8:	7e 91       	ld	r23, -X
    1bba:	73 95       	inc	r23
    1bbc:	7a 33       	cpi	r23, 0x3A	; 58
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <__ftoa_engine+0x180>
    1bc0:	70 e3       	ldi	r23, 0x30	; 48
    1bc2:	7c 93       	st	X, r23
    1bc4:	20 13       	cpse	r18, r16
    1bc6:	b8 f7       	brcc	.-18     	; 0x1bb6 <__ftoa_engine+0x174>
    1bc8:	7e 91       	ld	r23, -X
    1bca:	70 61       	ori	r23, 0x10	; 16
    1bcc:	7d 93       	st	X+, r23
    1bce:	30 f0       	brcs	.+12     	; 0x1bdc <__ftoa_engine+0x19a>
    1bd0:	83 95       	inc	r24
    1bd2:	71 e3       	ldi	r23, 0x31	; 49
    1bd4:	7d 93       	st	X+, r23
    1bd6:	70 e3       	ldi	r23, 0x30	; 48
    1bd8:	2a 95       	dec	r18
    1bda:	e1 f7       	brne	.-8      	; 0x1bd4 <__ftoa_engine+0x192>
    1bdc:	11 24       	eor	r1, r1
    1bde:	ef 90       	pop	r14
    1be0:	ff 90       	pop	r15
    1be2:	0f 91       	pop	r16
    1be4:	1f 91       	pop	r17
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	99 27       	eor	r25, r25
    1bec:	87 fd       	sbrc	r24, 7
    1bee:	90 95       	com	r25
    1bf0:	08 95       	ret

00001bf2 <strnlen_P>:
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	05 90       	lpm	r0, Z+
    1bf6:	61 50       	subi	r22, 0x01	; 1
    1bf8:	70 40       	sbci	r23, 0x00	; 0
    1bfa:	01 10       	cpse	r0, r1
    1bfc:	d8 f7       	brcc	.-10     	; 0x1bf4 <strnlen_P+0x2>
    1bfe:	80 95       	com	r24
    1c00:	90 95       	com	r25
    1c02:	8e 0f       	add	r24, r30
    1c04:	9f 1f       	adc	r25, r31
    1c06:	08 95       	ret

00001c08 <strnlen>:
    1c08:	fc 01       	movw	r30, r24
    1c0a:	61 50       	subi	r22, 0x01	; 1
    1c0c:	70 40       	sbci	r23, 0x00	; 0
    1c0e:	01 90       	ld	r0, Z+
    1c10:	01 10       	cpse	r0, r1
    1c12:	d8 f7       	brcc	.-10     	; 0x1c0a <strnlen+0x2>
    1c14:	80 95       	com	r24
    1c16:	90 95       	com	r25
    1c18:	8e 0f       	add	r24, r30
    1c1a:	9f 1f       	adc	r25, r31
    1c1c:	08 95       	ret

00001c1e <fputc>:
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	fb 01       	movw	r30, r22
    1c28:	23 81       	ldd	r18, Z+3	; 0x03
    1c2a:	21 fd       	sbrc	r18, 1
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <fputc+0x16>
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	9f ef       	ldi	r25, 0xFF	; 255
    1c32:	2c c0       	rjmp	.+88     	; 0x1c8c <fputc+0x6e>
    1c34:	22 ff       	sbrs	r18, 2
    1c36:	16 c0       	rjmp	.+44     	; 0x1c64 <fputc+0x46>
    1c38:	46 81       	ldd	r20, Z+6	; 0x06
    1c3a:	57 81       	ldd	r21, Z+7	; 0x07
    1c3c:	24 81       	ldd	r18, Z+4	; 0x04
    1c3e:	35 81       	ldd	r19, Z+5	; 0x05
    1c40:	42 17       	cp	r20, r18
    1c42:	53 07       	cpc	r21, r19
    1c44:	44 f4       	brge	.+16     	; 0x1c56 <fputc+0x38>
    1c46:	a0 81       	ld	r26, Z
    1c48:	b1 81       	ldd	r27, Z+1	; 0x01
    1c4a:	9d 01       	movw	r18, r26
    1c4c:	2f 5f       	subi	r18, 0xFF	; 255
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	31 83       	std	Z+1, r19	; 0x01
    1c52:	20 83       	st	Z, r18
    1c54:	8c 93       	st	X, r24
    1c56:	26 81       	ldd	r18, Z+6	; 0x06
    1c58:	37 81       	ldd	r19, Z+7	; 0x07
    1c5a:	2f 5f       	subi	r18, 0xFF	; 255
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	37 83       	std	Z+7, r19	; 0x07
    1c60:	26 83       	std	Z+6, r18	; 0x06
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <fputc+0x6e>
    1c64:	8b 01       	movw	r16, r22
    1c66:	ec 01       	movw	r28, r24
    1c68:	fb 01       	movw	r30, r22
    1c6a:	00 84       	ldd	r0, Z+8	; 0x08
    1c6c:	f1 85       	ldd	r31, Z+9	; 0x09
    1c6e:	e0 2d       	mov	r30, r0
    1c70:	09 95       	icall
    1c72:	89 2b       	or	r24, r25
    1c74:	e1 f6       	brne	.-72     	; 0x1c2e <fputc+0x10>
    1c76:	d8 01       	movw	r26, r16
    1c78:	16 96       	adiw	r26, 0x06	; 6
    1c7a:	8d 91       	ld	r24, X+
    1c7c:	9c 91       	ld	r25, X
    1c7e:	17 97       	sbiw	r26, 0x07	; 7
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	17 96       	adiw	r26, 0x07	; 7
    1c84:	9c 93       	st	X, r25
    1c86:	8e 93       	st	-X, r24
    1c88:	16 97       	sbiw	r26, 0x06	; 6
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <__ultoa_invert>:
    1c96:	fa 01       	movw	r30, r20
    1c98:	aa 27       	eor	r26, r26
    1c9a:	28 30       	cpi	r18, 0x08	; 8
    1c9c:	51 f1       	breq	.+84     	; 0x1cf2 <__ultoa_invert+0x5c>
    1c9e:	20 31       	cpi	r18, 0x10	; 16
    1ca0:	81 f1       	breq	.+96     	; 0x1d02 <__ultoa_invert+0x6c>
    1ca2:	e8 94       	clt
    1ca4:	6f 93       	push	r22
    1ca6:	6e 7f       	andi	r22, 0xFE	; 254
    1ca8:	6e 5f       	subi	r22, 0xFE	; 254
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	8f 4f       	sbci	r24, 0xFF	; 255
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	af 4f       	sbci	r26, 0xFF	; 255
    1cb2:	b1 e0       	ldi	r27, 0x01	; 1
    1cb4:	3e d0       	rcall	.+124    	; 0x1d32 <__ultoa_invert+0x9c>
    1cb6:	b4 e0       	ldi	r27, 0x04	; 4
    1cb8:	3c d0       	rcall	.+120    	; 0x1d32 <__ultoa_invert+0x9c>
    1cba:	67 0f       	add	r22, r23
    1cbc:	78 1f       	adc	r23, r24
    1cbe:	89 1f       	adc	r24, r25
    1cc0:	9a 1f       	adc	r25, r26
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	68 0f       	add	r22, r24
    1cc6:	79 1f       	adc	r23, r25
    1cc8:	8a 1f       	adc	r24, r26
    1cca:	91 1d       	adc	r25, r1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	6a 0f       	add	r22, r26
    1cd0:	71 1d       	adc	r23, r1
    1cd2:	81 1d       	adc	r24, r1
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	a1 1d       	adc	r26, r1
    1cd8:	20 d0       	rcall	.+64     	; 0x1d1a <__ultoa_invert+0x84>
    1cda:	09 f4       	brne	.+2      	; 0x1cde <__ultoa_invert+0x48>
    1cdc:	68 94       	set
    1cde:	3f 91       	pop	r19
    1ce0:	2a e0       	ldi	r18, 0x0A	; 10
    1ce2:	26 9f       	mul	r18, r22
    1ce4:	11 24       	eor	r1, r1
    1ce6:	30 19       	sub	r19, r0
    1ce8:	30 5d       	subi	r19, 0xD0	; 208
    1cea:	31 93       	st	Z+, r19
    1cec:	de f6       	brtc	.-74     	; 0x1ca4 <__ultoa_invert+0xe>
    1cee:	cf 01       	movw	r24, r30
    1cf0:	08 95       	ret
    1cf2:	46 2f       	mov	r20, r22
    1cf4:	47 70       	andi	r20, 0x07	; 7
    1cf6:	40 5d       	subi	r20, 0xD0	; 208
    1cf8:	41 93       	st	Z+, r20
    1cfa:	b3 e0       	ldi	r27, 0x03	; 3
    1cfc:	0f d0       	rcall	.+30     	; 0x1d1c <__ultoa_invert+0x86>
    1cfe:	c9 f7       	brne	.-14     	; 0x1cf2 <__ultoa_invert+0x5c>
    1d00:	f6 cf       	rjmp	.-20     	; 0x1cee <__ultoa_invert+0x58>
    1d02:	46 2f       	mov	r20, r22
    1d04:	4f 70       	andi	r20, 0x0F	; 15
    1d06:	40 5d       	subi	r20, 0xD0	; 208
    1d08:	4a 33       	cpi	r20, 0x3A	; 58
    1d0a:	18 f0       	brcs	.+6      	; 0x1d12 <__ultoa_invert+0x7c>
    1d0c:	49 5d       	subi	r20, 0xD9	; 217
    1d0e:	31 fd       	sbrc	r19, 1
    1d10:	40 52       	subi	r20, 0x20	; 32
    1d12:	41 93       	st	Z+, r20
    1d14:	02 d0       	rcall	.+4      	; 0x1d1a <__ultoa_invert+0x84>
    1d16:	a9 f7       	brne	.-22     	; 0x1d02 <__ultoa_invert+0x6c>
    1d18:	ea cf       	rjmp	.-44     	; 0x1cee <__ultoa_invert+0x58>
    1d1a:	b4 e0       	ldi	r27, 0x04	; 4
    1d1c:	a6 95       	lsr	r26
    1d1e:	97 95       	ror	r25
    1d20:	87 95       	ror	r24
    1d22:	77 95       	ror	r23
    1d24:	67 95       	ror	r22
    1d26:	ba 95       	dec	r27
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <__ultoa_invert+0x86>
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	61 05       	cpc	r22, r1
    1d2e:	71 05       	cpc	r23, r1
    1d30:	08 95       	ret
    1d32:	9b 01       	movw	r18, r22
    1d34:	ac 01       	movw	r20, r24
    1d36:	0a 2e       	mov	r0, r26
    1d38:	06 94       	lsr	r0
    1d3a:	57 95       	ror	r21
    1d3c:	47 95       	ror	r20
    1d3e:	37 95       	ror	r19
    1d40:	27 95       	ror	r18
    1d42:	ba 95       	dec	r27
    1d44:	c9 f7       	brne	.-14     	; 0x1d38 <__ultoa_invert+0xa2>
    1d46:	62 0f       	add	r22, r18
    1d48:	73 1f       	adc	r23, r19
    1d4a:	84 1f       	adc	r24, r20
    1d4c:	95 1f       	adc	r25, r21
    1d4e:	a0 1d       	adc	r26, r0
    1d50:	08 95       	ret

00001d52 <__prologue_saves__>:
    1d52:	2f 92       	push	r2
    1d54:	3f 92       	push	r3
    1d56:	4f 92       	push	r4
    1d58:	5f 92       	push	r5
    1d5a:	6f 92       	push	r6
    1d5c:	7f 92       	push	r7
    1d5e:	8f 92       	push	r8
    1d60:	9f 92       	push	r9
    1d62:	af 92       	push	r10
    1d64:	bf 92       	push	r11
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	ca 1b       	sub	r28, r26
    1d7c:	db 0b       	sbc	r29, r27
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	09 94       	ijmp

00001d8a <__epilogue_restores__>:
    1d8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d8c:	39 88       	ldd	r3, Y+17	; 0x11
    1d8e:	48 88       	ldd	r4, Y+16	; 0x10
    1d90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1da0:	df 80       	ldd	r13, Y+7	; 0x07
    1da2:	ee 80       	ldd	r14, Y+6	; 0x06
    1da4:	fd 80       	ldd	r15, Y+5	; 0x05
    1da6:	0c 81       	ldd	r16, Y+4	; 0x04
    1da8:	1b 81       	ldd	r17, Y+3	; 0x03
    1daa:	aa 81       	ldd	r26, Y+2	; 0x02
    1dac:	b9 81       	ldd	r27, Y+1	; 0x01
    1dae:	ce 0f       	add	r28, r30
    1db0:	d1 1d       	adc	r29, r1
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	ed 01       	movw	r28, r26
    1dbe:	08 95       	ret

00001dc0 <_exit>:
    1dc0:	f8 94       	cli

00001dc2 <__stop_program>:
    1dc2:	ff cf       	rjmp	.-2      	; 0x1dc2 <__stop_program>
