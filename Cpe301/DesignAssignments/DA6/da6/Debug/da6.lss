
da6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008df  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074a  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a2  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015a  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_IO>:

void read_adc(void);
void adc_init(void);
void init_IO(void){
	//Setup IO
	SHIFT_REGISTER |= (DATA | LATCH | CLOCK);	//Set control pins as outputs
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8c 62       	ori	r24, 0x2C	; 44
  aa:	84 b9       	out	0x04, r24	; 4
	SHIFT_PORT &= ~(DATA | LATCH | CLOCK);		//Set control pins low
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	83 7d       	andi	r24, 0xD3	; 211
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	08 95       	ret

000000b4 <init_SPI>:
}

void init_SPI(void){
	//Setup SPI
	SPCR = (1<<SPE) | (1<<MSTR);	//Start SPI as Master
  b4:	80 e5       	ldi	r24, 0x50	; 80
  b6:	8c bd       	out	0x2c, r24	; 44
  b8:	08 95       	ret

000000ba <spi_send>:
}

void spi_send(unsigned char byte){
	SPDR = byte;			//Shift in some data
  ba:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	//Wait for SPI process to finish
  bc:	0d b4       	in	r0, 0x2d	; 45
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <spi_send+0x2>
}
  c2:	08 95       	ret

000000c4 <adc_init>:



void adc_init(void)
{
	ADMUX |= (0 << REFS1) |  // Voltage reference bits
  c4:	ec e7       	ldi	r30, 0x7C	; 124
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	(0 << ADLAR) |  // Left adjust
	(0 << MUX3 ) |  // Source selector
	(0 << MUX2) |
	(0 << MUX1) |	// Select ADC0 (PC0) also our POT
	(0 << MUX0);
	ADCSRA |= (1 << ADEN) | //Enable ADC
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8d 6a       	ori	r24, 0xAD	; 173
  d6:	80 83       	st	Z, r24
	(0 << ADIF) |           //Interrupt flag
	(1 << ADIE) |           //Enable interrupt
	(1 << ADPS2) |          //Prescalar
	(0 << ADPS1) |
	(1 << ADPS0);
	ADCSRB |= (0 << ADTS2) |  //Auto-trigger source
  d8:	eb e7       	ldi	r30, 0x7B	; 123
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <main>:
volatile int j = 4;

int main(void)
{
    //Configure TIMER2
	TCCR0A = 0x00;
  e2:	14 bc       	out	0x24, r1	; 36
	TCCR0A |=	(1 << COM0B1) |								// Fast PWM mode non-inverting
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	83 62       	ori	r24, 0x23	; 35
  e8:	84 bd       	out	0x24, r24	; 36
				(1 << WGM01) | (1 << WGM00);				// Fast PWM, TOP: 0xFF
	TCCR0B |=	(1 << CS02) | (1 << CS01) | (1 << CS00);	// 1024 prescaler
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	85 bd       	out	0x25, r24	; 37

	//Motor test configure
	DDRD |= 0x03;		//PORTD 7 and 5 as Output
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PD5);	// PD5(OC0B) motor enable
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	8b b9       	out	0x0b, r24	; 11
    adc_init(); //Initialize ADC
 100:	0e 94 62 00 	call	0xc4	; 0xc4 <adc_init>
	init_IO();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <init_IO>
	init_SPI();
 108:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_SPI>
    ADCSRA |= (1<<ADSC); //trigger
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	8a e1       	ldi	r24, 0x1A	; 26
 11a:	96 e0       	ldi	r25, 0x06	; 6
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x3a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x44>
 126:	00 00       	nop
    _delay_ms(125);
    sei();
 128:	78 94       	sei

    while (1) {
	    //Pull LATCH low (Important: this is necessary to start the SPI transfer!)
		SHIFT_PORT &= ~LATCH;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	85 b9       	out	0x05, r24	; 5

		//spi_send((unsigned char)(0xA4));
		//spi_send((unsigned char)0xF8);
		/* Show 0-9 pattern for 1 second @ different digits */
		for (uint8_t i = 0; i < 10; i++) {
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	1a c0       	rjmp	.+52     	; 0x168 <main+0x86>
			spi_send((unsigned char)SEGMENT_MAP[i]);
 134:	ec 2f       	mov	r30, r28
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ee 5f       	subi	r30, 0xFE	; 254
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	80 81       	ld	r24, Z
 13e:	0e 94 5d 00 	call	0xba	; 0xba <spi_send>
			spi_send((unsigned char)0xF4);
 142:	84 ef       	ldi	r24, 0xF4	; 244
 144:	0e 94 5d 00 	call	0xba	; 0xba <spi_send>
			//Toggle latch to copy data to the storage register
			SHIFT_PORT |= LATCH;
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	85 b9       	out	0x05, r24	; 5
			SHIFT_PORT &= ~LATCH;
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	8b 7f       	andi	r24, 0xFB	; 251
 152:	85 b9       	out	0x05, r24	; 5
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	83 ed       	ldi	r24, 0xD3	; 211
 158:	90 e3       	ldi	r25, 0x30	; 48
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x78>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x82>
 164:	00 00       	nop
		SHIFT_PORT &= ~LATCH;

		//spi_send((unsigned char)(0xA4));
		//spi_send((unsigned char)0xF8);
		/* Show 0-9 pattern for 1 second @ different digits */
		for (uint8_t i = 0; i < 10; i++) {
 166:	cf 5f       	subi	r28, 0xFF	; 255
 168:	ca 30       	cpi	r28, 0x0A	; 10
 16a:	20 f3       	brcs	.-56     	; 0x134 <main+0x52>
 16c:	de cf       	rjmp	.-68     	; 0x12a <main+0x48>

0000016e <__vector_21>:
	(0 << ADTS0);
}

//ADC conversion complete ISR
ISR(ADC_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
	adc_temp += ADC; //sum
 180:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 184:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 188:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 18c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 190:	82 0f       	add	r24, r18
 192:	93 1f       	adc	r25, r19
 194:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 198:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	j--;
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (j==1)
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	31 f5       	brne	.+76     	; 0x206 <__vector_21+0x98>
	{
		adc_temp /= 16; // 0-1023 / 16 = 0-255 / 4 average
 1ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1be:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1c2:	92 95       	swap	r25
 1c4:	82 95       	swap	r24
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	89 27       	eor	r24, r25
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	89 27       	eor	r24, r25
 1ce:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		//snprintf(outs,sizeof(outs),"%3d\r\n", adc_temp);
		// This adc value from POT on protoshield should set our DC PWM duty cycle
		// So this reading needs to be translated to OCR1A
		OCR0B = adc_temp;	// Overflow will just start from 0%
 1d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1da:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1de:	88 bd       	out	0x28, r24	; 40
		adc_temp = 0;
 1e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 1e4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		j = 4;
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	2f e7       	ldi	r18, 0x7F	; 127
 1f6:	8a e1       	ldi	r24, 0x1A	; 26
 1f8:	96 e0       	ldi	r25, 0x06	; 6
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <__vector_21+0x8c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <__vector_21+0x96>
 204:	00 00       	nop
		_delay_ms(125);
	}
	else {
		//ADCSRA |= (1<<ADSC); //trigger another
	}
}
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
